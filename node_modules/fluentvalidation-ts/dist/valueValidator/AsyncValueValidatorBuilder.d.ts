import { AsyncValueValidator } from './AsyncValueValidator';
import { IAsyncValidator } from '../IAsyncValidator';
import { CoreValueValidatorBuilder } from './CoreValueValidatorBuilder';
import { ValueTransformer } from './ValueTransformer';
export declare class AsyncValueValidatorBuilder<TModel, TValue, TTransformedValue> extends CoreValueValidatorBuilder<TModel, TValue, TTransformedValue> {
    constructor(rebuildValidateAsync: () => void, transformValue: ValueTransformer<TValue, TTransformedValue>);
    build: () => AsyncValueValidator<TModel, TValue, TTransformedValue>;
    mustAsync: (definition: {
        predicate: (value: TTransformedValue, model: TModel) => Promise<boolean>;
        message: string | ((value: TTransformedValue, model: TModel) => string);
    } | ({
        predicate: (value: TTransformedValue, model: TModel) => Promise<boolean>;
        message: string | ((value: TTransformedValue, model: TModel) => string);
    } | ((value: TTransformedValue, model: TModel) => Promise<boolean>))[] | ((value: TTransformedValue, model: TModel) => Promise<boolean>)) => {
        withMessage: (message: string) => {
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
    };
    setAsyncValidator: (validatorProducer: (model: TModel) => IAsyncValidator<TTransformedValue>) => {
        withMessage: (message: string) => {
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
    };
    getAllRules: () => {
        mustAsync: (definition: {
            predicate: (value: TTransformedValue, model: TModel) => Promise<boolean>;
            message: string | ((value: TTransformedValue, model: TModel) => string);
        } | ({
            predicate: (value: TTransformedValue, model: TModel) => Promise<boolean>;
            message: string | ((value: TTransformedValue, model: TModel) => string);
        } | ((value: TTransformedValue, model: TModel) => Promise<boolean>))[] | ((value: TTransformedValue, model: TModel) => Promise<boolean>)) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        setAsyncValidator: (validatorProducer: (model: TModel) => IAsyncValidator<TTransformedValue>) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        notEqual: (forbiddenValue: TTransformedValue) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        equal: (requiredValue: TTransformedValue) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        must: (definition: {
            predicate: (value: TTransformedValue, model: TModel) => boolean;
            message: string | ((value: TTransformedValue, model: TModel) => string);
        } | ({
            predicate: (value: TTransformedValue, model: TModel) => boolean;
            message: string | ((value: TTransformedValue, model: TModel) => string);
        } | ((value: TTransformedValue, model: TModel) => boolean))[] | ((value: TTransformedValue, model: TModel) => boolean)) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        notNull: () => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        null: () => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        notEmpty: () => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        length: (minLength: number, maxLength: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        maxLength: (maxLength: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        minLength: (minLength: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        matches: (pattern: RegExp) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        emailAddress: () => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        lessThan: (threshold: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        lessThanOrEqualTo: (threshold: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        greaterThan: (threshold: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        greaterThanOrEqualTo: (threshold: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        exclusiveBetween: (lowerBound: number, upperBound: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        inclusiveBetween: (lowerBound: number, upperBound: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        setValidator: (validatorProducer: (model: TModel) => import("../IValidator").IValidator<TTransformedValue>) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        scalePrecision: (precision: number, scale: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
    };
}
