import Config from '../config';
import Router from '../router/Router';
import PropertyContext from './PropertyContext';
import { Origins } from '../types';
import LambdaResponse from './LambdaResponse';
import LambdaRequest from './LambdaRequest';
export default class RequestHandler {
    basedir: string;
    injectOrigins: Origins[];
    private cache?;
    private router?;
    private propertyContext?;
    private config;
    constructor(basedir: string, injectOrigins?: Origins[]);
    reload(router?: Router, propertyContext?: PropertyContext): Router;
    withOrigins(config: Config): Config;
    handle(request: LambdaRequest, response: LambdaResponse): Promise<void>;
    private createRequestContext;
    /**
     * Simulates the Sailfish front end behavior of following redirects.
     * This is needed to implement retry.
     * @param request
     * @param response
     */
    private handleRedirects;
    createEdgeConfig(): string;
    createPreloadConfig(): Promise<import("../router/Preload").PreloadConfig>;
}
