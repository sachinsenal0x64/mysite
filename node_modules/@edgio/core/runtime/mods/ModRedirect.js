"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Mod_1 = __importDefault(require("./Mod"));
const Phase_1 = __importDefault(require("../Phase"));
const EarlyReturn_1 = __importDefault(require("../EarlyReturn"));
const interpolate_1 = __importDefault(require("../interpolate"));
const path_1 = require("../../router/path");
/**
 * Emulation of Sailfish's mod_redirect
 */
class ModRedirect extends Mod_1.default {
    async execute(phase) {
        this.context.forEachMatchingRule(rule => this.applyFeatures(rule, phase));
    }
    applyFeatures(features, phase) {
        var _a;
        const request = this.context.getRequest();
        const response = this.context.getResponse();
        const requestUrl = request.url;
        // last follow_redirects must be used, but should never be overwritten in cases where it isnt set
        if (((_a = features.url) === null || _a === void 0 ? void 0 : _a.follow_redirects) !== undefined) {
            this.context.followRedirects = features.url.follow_redirects;
        }
        if (phase === Phase_1.default.UriClean) {
            if (!features.url || !features.url.url_redirect) {
                return;
            }
            const { url_redirect } = features.url;
            const { code, source, destination, syntax } = url_redirect;
            if (!destination) {
                throw new Error('url.url_redirect.destination is required but was not provided.');
            }
            const location = (0, path_1.mapURL)(requestUrl, source, (0, interpolate_1.default)(destination, this.context), syntax);
            // When location is null, it means that the redirect source didn't match the url.
            // We want to skip this url_redirect feature in this case.
            if (!location)
                return;
            response.statusCode = code || 302;
            response.setHeader('location', location);
            // we end the response in order to not get stuck on stream processing
            response.end();
            throw new EarlyReturn_1.default('redirect');
        }
    }
    toString() {
        return 'ModRedirect';
    }
}
exports.default = ModRedirect;
