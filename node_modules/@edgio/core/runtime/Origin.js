"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const log_1 = __importDefault(require("../log"));
const Backend_1 = __importDefault(require("./Backend"));
const random_1 = require("./random");
class Origin {
    constructor(config) {
        this.config = config;
    }
    async fetch(request, response, options = {}) {
        const hostConfig = this.selectHost();
        const host = Backend_1.default.create(hostConfig, this.config);
        return host.fetch(request, response, options);
    }
    /**
     * Selects a backend based on the "balancer" property
     */
    selectHost() {
        const { balancer } = this.config;
        if ('static_weighted' === balancer) {
            return this.config.hosts[0];
        }
        else if ('round_robin' === balancer) {
            // TODO instead of calling a random one, iterate through indexes for each call
            return (0, random_1.getRandomElement)(this.config.hosts);
        }
        else {
            // TODO implement other load balancing strategies, static_weighted
            if (balancer) {
                log_1.default.warn(`balancer type "${balancer}" is not supported during local development, falling back to "static".`);
            }
            return this.config.hosts[0];
        }
    }
}
exports.default = Origin;
