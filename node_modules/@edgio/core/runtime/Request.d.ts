/// <reference types="node" />
export type RequestHeaders = {
    [key: string]: unknown;
};
/**
 * Represents an incoming request.
 */
export default interface Request {
    /**
     * The path and query string
     */
    url: string;
    /**
     * Just the path part of the URL
     */
    path: string;
    /**
     * The request body as a string
     */
    body?: string;
    /**
     * The raw request body as a buffer
     */
    rawBody?: Buffer;
    /**
     * The HTTP method
     */
    method: string;
    /**
     * The protocol (e.g. http or hhtps)
     */
    protocol: string;
    /**
     * The http version (e.g. )
     */
    httpVersion: string;
    /**
     * The request headers.  Keys are header names, values are either a string, or when multiple values for
     * the same header name are present, an array of strings.
     */
    headers: RequestHeaders;
    /**
     * Raw headers, supported by both converting from lambda request and express request
     */
    rawHeaders: string[];
    /**
     * Port on which request came.
     */
    port: string;
    socket: {
        /**
         * The IP address of the client
         */
        remoteAddress: string;
    };
    /**
     * The path params returned by the matching route.
     */
    params?: {
        [key: string]: string | string[];
    };
    /**
     * The params extracted from the request URL's query string
     */
    query: {
        [key: string]: string | string[] | undefined;
    };
    /**
     * Flag indicating if the connection to Edgio is secure (HTTPS) or not (HTTP).
     */
    secure: boolean;
    /**
     * Sets a header
     * @param name The name of the header to set
     * @param value The value to set
     */
    setHeader: (name: string, value: unknown) => void;
    /**
     * Gets the value of a header
     * @param name The name of the header to return - case insensitive
     * @returns The value of the header
     */
    getHeader: (name: string) => unknown;
    /**
     * Gets all headers as key/value pairs.
     */
    getHeaders: () => RequestHeaders;
    /**
     * Removes a header
     * @param name The header to remove
     */
    removeHeader: (name: string) => void;
    /**
     * Returns a clone of the original request, before any properties were altered
     * @returns
     */
    cloneOriginal: () => Request;
}
