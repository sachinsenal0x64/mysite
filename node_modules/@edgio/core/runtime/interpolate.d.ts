import RequestContext from './RequestContext';
/**
 * Replaces variables in the provided value with attributes of the request.
 *
 * For example, %{scheme}://www.example.com/products/%{arg_id} would become
 * https://www.example.com/products/1 for a request to https://www.example.com/products?id=1
 *
 * For more, see https://gitlab.com/limelight-networks/edgecast/mirrors/sailfish/-/blob/master/ecdoc/core-httpvars.rst
 *
 * @param value The value to interpolate
 * @param context The requestContext whose attributes should be used
 * @param values The object with extracted values
 * @returns
 */
declare const interpolate: (value: string, context: RequestContext, values?: Record<string, string>) => string;
export default interpolate;
/**
 * Replaces all values for all keys in an object with interpolated value
 *
 * @param target Object whos keys will be itterated and values changed with interpolate function call
 * @param context
 */
export declare const interpolateObject: (target: Record<string, string>, context: RequestContext) => Record<string, string>;
export declare const extractInterpolationValues: (context: RequestContext) => Record<string, string>;
/**
 * Extracts values from source object to destination object with provided key prefix.
 * This function ensures correct appending of existing
 * and new values which can either be string or string[].
 * It also ensures that all keys are converted to lower case.
 *
 * @param prefix prefix to be added in front of all dest keys
 * @param srcObj source object
 * @param destObj destination object
 * @example usage: extractValuesFromObject('http_', request.getHeaders(), values)
 */
export declare const extractValuesFromObject: (prefix: string, srcObj: {
    [key: string]: unknown;
}, destObj: {
    [key: string]: string;
}) => void;
