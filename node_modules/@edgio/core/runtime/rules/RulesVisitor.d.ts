import { Boolean, Conditionals, Features, Matches, Rules } from '../../types';
/**
 * Config object with callbacks for RulesVisitor
 */
export interface RulesVisitorCallbacks {
    onRuleVisit?: (rule: Rules, ruleIndex: number) => void;
    onMatchesVisit?: (matches: Matches, ruleIndex: number) => void;
    onFeaturesVisit?: (features: Features, ruleIndex: number) => void;
    onConditionalsVisit?: (conditionals: Conditionals, ruleIndex: number) => void;
    onBooleanVisit?: (boolean: Boolean, ruleIndex: number) => void;
    onConditionVisit?: (condition: any[], operator: string, ruleIndex: number) => void;
}
export declare class RulesVisitorStop extends Error {
}
/**
 * Visitor for Rules which allows to visit each node of the Rules structure
 * and call callbacks for each node type.
 */
export default class RulesVisitor {
    protected callbacks: RulesVisitorCallbacks;
    constructor(callbacks?: RulesVisitorCallbacks);
    /**
     * Sets callback which is triggered when Rule node is visited.
     * @param callback
     */
    onRuleVisit(callback: (rule: Rules, ruleIndex: number) => void): void;
    /**
     * Sets callback which is triggered when Matches node is visited.
     * @param callback
     */
    onMatchesVisit(callback: (matches: Matches, ruleIndex: number) => void): void;
    /**
     * Sets callback which is triggered when Features node is visited.
     * @param callback
     */
    onFeaturesVisit(callback: (features: Features, ruleIndex: number) => void): void;
    /**
     * Sets callback which is triggered when Conditionals node is visited.
     * @param callback
     */
    onConditionalsVisit(callback: (conditionals: Conditionals, ruleIndex: number) => void): void;
    /**
     * Sets callback which is triggered when Boolean node is visited.
     * @param callback
     */
    onBooleanVisit(callback: (boolean: Boolean, ruleIndex: number) => void): void;
    /**
     * The visitor visits each node of the Rules structure and calls callbacks for each node type.
     * This is starting point of the visitor.
     * @param rules The array of rules
     * @param parentRuleIndex The index of parent rule if we're visiting nested rules
     */
    visit(rules: Rules[], parentRuleIndex?: number): void;
    /**
     * This method is called when we visit Rule node.
     * @param rule
     * @param ruleIndex
     */
    protected visitRule(rule: Rules, ruleIndex: number): void;
    /**
     * This method is called when we visit Matches node.
     * @param matches
     * @param ruleIndex
     */
    protected visitMatches(matches: any, ruleIndex: number): void;
    /**
     * This method is called when we visit Features or Rules node.
     * @param featuresOrRules
     * @param ruleIndex
     */
    protected visitFeaturesOrRules(featuresOrRules: Features | Rules[], ruleIndex: number): void;
    /**
     * This method is called when we visit Features node.
     * @param features
     * @param ruleIndex
     */
    protected visitFeatures(features: Features, ruleIndex: number): void;
    /**
     * This method is called when we visit Conditionals node.
     * @param conditionals
     * @param ruleIndex
     */
    protected visitConditionals(conditionals: Conditionals, ruleIndex: number): void;
    /**
     * This method is called when we visit Condition node.
     * @param operator
     * @param condition
     * @param ruleIndex
     */
    protected visitCondition(condition: any[], operator: string, ruleIndex: number): void;
    /**
     * This method is called when we visit Boolean node.
     * @param boolean
     * @param ruleIndex
     */
    protected visitBoolean(boolean: Boolean, ruleIndex: number): void;
    /**
     * Returns true if passed object is Matches type from Rules
     * @param rule
     */
    protected isMatches(rule: Rules): rule is Matches;
    /**
     * Returns true if passed object is Rules[] type from Rules
     * @param rule
     */
    protected isRules(rule: Features | Rules[]): rule is Rules[];
    /**
     * Returns true if passed object is Boolean type from Rules
     * @param condition
     */
    protected isBoolean(condition: Boolean | Conditionals | Features): condition is Boolean;
    /**
     * Returns true if passed object is Conditionals type from Rules
     * @param condition
     */
    protected isConditionals(condition: Boolean | Conditionals | Features): condition is Conditionals;
    /**
     * This method can be called from any visit method or callback to immediately stop the visitor.
     */
    stop(): void;
}
