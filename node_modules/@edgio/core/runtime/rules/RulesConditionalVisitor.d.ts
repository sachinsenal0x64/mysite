import RulesVisitor, { RulesVisitorCallbacks } from './RulesVisitor';
import { Boolean, Conditionals, RulesVariables } from '../../types';
import { Operand } from './constants';
/**
 * This operator map provides the functions which are used to evaluate the conditionals.
 * The key is the operator name, the value is the function which accepts two operands (left and right side of condition).
 */
export declare const operatorsMap: {
    [key: string]: (l: any, r: any) => boolean;
};
/**
 * This callback should accept RulesVariables and return the values for them.
 * If the variable is unknown or not supported, it should return undefined.
 */
export type EvalVariableCallback = (variable: RulesVariables) => Operand | undefined;
/**
 * Visitor for the Rules which visits each node of the Rules structure
 * and call callbacks for each node type only if the Rule's condition is evaluated to true.
 */
export default class RulesConditionalVisitor extends RulesVisitor {
    protected evalVariableCallback: EvalVariableCallback;
    constructor(evalVariableCallback: EvalVariableCallback, callbacks?: RulesVisitorCallbacks);
    /**
     * This method is called when we visit Matches node.
     * It calls visitFeatures/visitRules if the Matches condition is evaluated to true.
     * @param matches
     * @param ruleIndex
     */
    protected visitMatches(matches: any, ruleIndex: number): void;
    /**
     * Returns true if provided Boolean is evaluated to true.
     * @param boolean
     * @param ruleIndex
     * @example
     * evalConditionals({
     *   "and": [
     *     {
     *       "==": [
     *         {
     *           "request": "path"
     *         },
     *         "/:path"
     *       ]
     *     },
     *     {
     *       "or": [
     *           {
     *              "==": [
     *                {
     *                  "request": "path"
     *                },
     *                "/:path"
     *              ]
     *           }
     *       ]
     *     }
     *   ]
     * }) => true
     */
    protected evalBoolean(boolean: Boolean, ruleIndex: number): boolean;
    /**
     * Returns true if provided Conditionals is met, false otherwise.
     * @param conditionals
     * @param ruleIndex
     * @example
     * evalConditionals({
     *     "==": [
     *        {
     *          "request": "path"
     *        },
     *        "/:path"
     *     ]
     * }) => true
     */
    protected evalConditionals(conditionals: Conditionals, ruleIndex: number): boolean;
    /**
     * Returns true if provided Condition is met, false otherwise.
     * @param condition
     * @param operator
     * @param ruleIndex
     * @example
     * evalCondition([
     *     {
     *          "request": "path"
     *     },
     *     "/:path"
     * ], "==") => true
     */
    protected evalCondition(condition: any[], operator: string, ruleIndex: number): boolean;
    /**
     * Evaluates an operands, which may be a constant or RulesVariable instance.
     * @param operand
     * @returns
     */
    protected evalOperand(operand: Operand): Operand | undefined;
}
