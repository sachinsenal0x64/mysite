"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RulesVisitorStop = void 0;
const constants_1 = require("./constants");
class RulesVisitorStop extends Error {
}
exports.RulesVisitorStop = RulesVisitorStop;
/**
 * Visitor for Rules which allows to visit each node of the Rules structure
 * and call callbacks for each node type.
 */
class RulesVisitor {
    constructor(callbacks = {}) {
        this.callbacks = callbacks;
    }
    /**
     * Sets callback which is triggered when Rule node is visited.
     * @param callback
     */
    onRuleVisit(callback) {
        this.callbacks.onRuleVisit = callback;
    }
    /**
     * Sets callback which is triggered when Matches node is visited.
     * @param callback
     */
    onMatchesVisit(callback) {
        this.callbacks.onMatchesVisit = callback;
    }
    /**
     * Sets callback which is triggered when Features node is visited.
     * @param callback
     */
    onFeaturesVisit(callback) {
        this.callbacks.onFeaturesVisit = callback;
    }
    /**
     * Sets callback which is triggered when Conditionals node is visited.
     * @param callback
     */
    onConditionalsVisit(callback) {
        this.callbacks.onConditionalsVisit = callback;
    }
    /**
     * Sets callback which is triggered when Boolean node is visited.
     * @param callback
     */
    onBooleanVisit(callback) {
        this.callbacks.onBooleanVisit = callback;
    }
    /**
     * The visitor visits each node of the Rules structure and calls callbacks for each node type.
     * This is starting point of the visitor.
     * @param rules The array of rules
     * @param parentRuleIndex The index of parent rule if we're visiting nested rules
     */
    visit(rules, parentRuleIndex) {
        try {
            rules.forEach((rule, ruleIndex) => this.visitRule(rule, parentRuleIndex !== null && parentRuleIndex !== void 0 ? parentRuleIndex : ruleIndex));
        }
        catch (e) {
            if (e instanceof RulesVisitorStop)
                return;
            // Rethrow unknown error
            throw e;
        }
    }
    /**
     * This method is called when we visit Rule node.
     * @param rule
     * @param ruleIndex
     */
    visitRule(rule, ruleIndex) {
        var _a, _b;
        (_b = (_a = this.callbacks) === null || _a === void 0 ? void 0 : _a.onRuleVisit) === null || _b === void 0 ? void 0 : _b.call(_a, rule, ruleIndex);
        if (this.isMatches(rule)) {
            this.visitMatches(rule, ruleIndex);
        }
        else {
            this.visitFeaturesOrRules(rule, ruleIndex);
        }
    }
    /**
     * This method is called when we visit Matches node.
     * @param matches
     * @param ruleIndex
     */
    visitMatches(matches, ruleIndex) {
        var _a, _b;
        (_b = (_a = this.callbacks) === null || _a === void 0 ? void 0 : _a.onMatchesVisit) === null || _b === void 0 ? void 0 : _b.call(_a, matches, ruleIndex);
        const ifStatements = matches === null || matches === void 0 ? void 0 : matches.if;
        if (!ifStatements)
            return;
        ifStatements.forEach((ifStatement) => {
            if (this.isConditionals(ifStatement)) {
                this.visitConditionals(ifStatement, ruleIndex);
            }
            else if (this.isBoolean(ifStatement)) {
                this.visitBoolean(ifStatement, ruleIndex);
            }
            else {
                this.visitFeaturesOrRules(ifStatement, ruleIndex);
            }
        });
    }
    /**
     * This method is called when we visit Features or Rules node.
     * @param featuresOrRules
     * @param ruleIndex
     */
    visitFeaturesOrRules(featuresOrRules, ruleIndex) {
        this.isRules(featuresOrRules)
            ? this.visit(featuresOrRules, ruleIndex)
            : this.visitFeatures(featuresOrRules, ruleIndex);
    }
    /**
     * This method is called when we visit Features node.
     * @param features
     * @param ruleIndex
     */
    visitFeatures(features, ruleIndex) {
        var _a, _b;
        (_b = (_a = this.callbacks) === null || _a === void 0 ? void 0 : _a.onFeaturesVisit) === null || _b === void 0 ? void 0 : _b.call(_a, features, ruleIndex);
    }
    /**
     * This method is called when we visit Conditionals node.
     * @param conditionals
     * @param ruleIndex
     */
    visitConditionals(conditionals, ruleIndex) {
        var _a, _b;
        (_b = (_a = this.callbacks) === null || _a === void 0 ? void 0 : _a.onConditionalsVisit) === null || _b === void 0 ? void 0 : _b.call(_a, conditionals, ruleIndex);
        Object.keys(conditionals).forEach(operator => {
            const condition = conditionals[operator];
            this.visitCondition(condition, operator, ruleIndex);
        });
    }
    /**
     * This method is called when we visit Condition node.
     * @param operator
     * @param condition
     * @param ruleIndex
     */
    visitCondition(condition, operator, ruleIndex) {
        var _a, _b;
        (_b = (_a = this.callbacks) === null || _a === void 0 ? void 0 : _a.onConditionVisit) === null || _b === void 0 ? void 0 : _b.call(_a, condition, operator, ruleIndex);
    }
    /**
     * This method is called when we visit Boolean node.
     * @param boolean
     * @param ruleIndex
     */
    visitBoolean(boolean, ruleIndex) {
        var _a, _b, _c, _d;
        (_b = (_a = this.callbacks) === null || _a === void 0 ? void 0 : _a.onBooleanVisit) === null || _b === void 0 ? void 0 : _b.call(_a, boolean, ruleIndex);
        const booleanItemHandler = (item) => {
            if (this.isBoolean(item))
                return this.visitBoolean(item, ruleIndex);
            this.visitConditionals(item, ruleIndex);
        };
        (_c = boolean[constants_1.AND]) === null || _c === void 0 ? void 0 : _c.forEach(booleanItemHandler);
        (_d = boolean[constants_1.OR]) === null || _d === void 0 ? void 0 : _d.forEach(booleanItemHandler);
    }
    /**
     * Returns true if passed object is Matches type from Rules
     * @param rule
     */
    isMatches(rule) {
        return Object.keys(rule).includes('if');
    }
    /**
     * Returns true if passed object is Rules[] type from Rules
     * @param rule
     */
    isRules(rule) {
        return Array.isArray(rule);
    }
    /**
     * Returns true if passed object is Boolean type from Rules
     * @param condition
     */
    isBoolean(condition) {
        return [constants_1.AND, constants_1.OR].some(key => Object.keys(condition).includes(key));
    }
    /**
     * Returns true if passed object is Conditionals type from Rules
     * @param condition
     */
    isConditionals(condition) {
        return [
            constants_1.EQUALS_EXPRESS,
            constants_1.EQUALS,
            constants_1.NOT_EQUALS_EXPRESS,
            constants_1.NOT_EQUALS,
            constants_1.MATCHES,
            constants_1.NOT_MATCHES,
            constants_1.GREATER_THAN,
            constants_1.GREATER_THAN_OR_EQUALS,
            constants_1.LESS_THAN,
            constants_1.LESS_THAN_OR_EQUALS,
            constants_1.IN,
            constants_1.NOT_IN,
        ].some(key => Object.keys(condition).includes(key));
    }
    /**
     * This method can be called from any visit method or callback to immediately stop the visitor.
     */
    stop() {
        throw new RulesVisitorStop();
    }
}
exports.default = RulesVisitor;
