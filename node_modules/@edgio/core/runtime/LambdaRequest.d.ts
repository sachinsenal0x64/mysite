/// <reference types="node" />
import Request, { RequestHeaders } from '../runtime/Request';
export interface LambdaRequestOptions {
    /**
     * Either pass URL, or mock only certain values.
     *
     * Implemented this way as we use only pathname + query as request.url,
     * dont need hostname, protocol in a lot of cases -> such as testing,
     * and traditional URL can't be built without it.
     */
    url: {
        pathname: URL['pathname'];
        protocol?: URL['protocol'];
        search?: URL['search'];
        host?: URL['host'];
        port?: URL['port'];
    };
    headers?: RequestHeaders;
    body?: string | Buffer;
    method?: string;
    httpVersion?: string;
}
/**
 * Data holder for lambda request.

 * Useful for cases when request needs to be created for:
 *    - lambda invocation / reqResMapper
 *    - findMatchingRules invocation
 *    - fiddle RequestContext invocation
 *    - tests (mainly ones invoking RequestContext directly)
 */
export default class LambdaRequest implements Request {
    url: string;
    path: string;
    headers: RequestHeaders;
    rawHeaders: string[];
    query: {
        [key: string]: string | string[] | undefined;
    };
    method: string;
    protocol: string;
    secure: boolean;
    socket: {
        remoteAddress: string;
        encrypted: boolean;
    };
    connection: {
        encrypted: boolean;
    };
    httpVersion: string;
    port: string;
    params?: {
        [key: string]: string | string[];
    } | undefined;
    rawBody: Buffer;
    private options;
    constructor(options: LambdaRequestOptions);
    /**
     * Returns a clone of the original request, before any properties were altered.
     */
    cloneOriginal(): LambdaRequest;
    setHeader(name: string, value: unknown): void;
    getHeader(name: string): unknown;
    getHeaders(): RequestHeaders;
    removeHeader(name: string): void;
    get body(): string;
}
