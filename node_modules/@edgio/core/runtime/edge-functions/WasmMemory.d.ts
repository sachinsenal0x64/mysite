/// <reference types="node" />
export default class WasmMemory {
    private memory;
    constructor(memory: DataView);
    /**
     * Gets the Float32 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getFloat32(byteOffset: number): number;
    /**
     * Gets the Float64 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getFloat64(byteOffset: number): number;
    /**
     * Gets the Int8 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getInt8(byteOffset: number): number;
    /**
     * Gets the Int16 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getInt16(byteOffset: number): number;
    /**
     * Gets the Int32 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getInt32(byteOffset: number): number;
    /**
     * Gets the Uint8 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getUint8(byteOffset: number): number;
    /**
     * Gets the Uint16 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getUint16(byteOffset: number): number;
    /**
     * Gets the Uint32 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getUint32(byteOffset: number): number;
    /**
     * Stores an Float32 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     */
    setFloat32(byteOffset: number, value: number): void;
    /**
     * Stores an Float64 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     */
    setFloat64(byteOffset: number, value: number): void;
    /**
     * Stores an Int8 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     */
    setInt8(byteOffset: number, value: number): void;
    /**
     * Stores an Int16 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     */
    setInt16(byteOffset: number, value: number): void;
    /**
     * Stores an Int32 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     */
    setInt32(byteOffset: number, value: number): void;
    /**
     * Stores an Uint8 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     */
    setUint8(byteOffset: number, value: number): void;
    /**
     * Stores an Uint16 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     */
    setUint16(byteOffset: number, value: number): void;
    /**
     * Stores an Uint32 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     */
    setUint32(byteOffset: number, value: number): void;
    /**
     * Gets the BigInt64 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getBigInt64(byteOffset: number): bigint;
    /**
     * Gets the BigUint64 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getBigUint64(byteOffset: number): bigint;
    /**
     * Stores a BigInt64 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     * @param littleEndian If false or undefined, a big-endian value should be written.
     */
    setBigInt64(byteOffset: number, value: bigint): void;
    /**
     * Stores a BigUint64 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     * @param littleEndian If false or undefined, a big-endian value should be written.
     */
    setBigUint64(byteOffset: number, value: bigint): void;
    /**
     * Replaces the entire memory with the given buffer. Use for warm starts.
     * @param wasmInitialMemory The memory buffer to set
     */
    setBuffer(wasmInitialMemory: Buffer): void;
    /**
     * Returns the current byte length of the memory.
     * @returns Byte length of current memory buffer.
     */
    getByteLength(): number;
    /**
     * Returns an array buffer between in [start, end) range of the memory.
     * @param start The place in the memory where the slice begins.
     * @param end Optional: The place in the memory where the slice ends. Default is the end of the memory.
     * @returns ArrayBuffer containing the slice of the memory.
     */
    slice(start: number, end?: number): ArrayBuffer;
}
