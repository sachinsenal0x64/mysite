/// <reference types="node" />
import WasmMemory from './WasmMemory';
export declare const SIZEOF_wasi_iovec_t = 8;
export declare enum wasm_status {
    ok = 0,
    system_error = 1,
    not_found = 2,
    insufficient_buffer = 3,
    invalid_args_count = 4,
    invalid_argument = 5,
    invalid_operation = 6,
    invalid_id = 7,
    limit_exceeded = 8,
    client_abandoned = 9
}
export declare class WasmError {
    status: wasm_status;
    message?: string;
    static ok(): WasmError;
    constructor(status: wasm_status, message?: string);
}
export default class WasmProgram {
    private instance;
    protected guestErrorMessage?: string;
    protected lastHostErrorMessage: string | undefined;
    protected setInstance(instance: WebAssembly.Instance): void;
    protected getGuestMemory(): WasmMemory;
    protected getStringFromGuestMemory(memory: WasmMemory, offset: number, len: number): string | WasmError;
    protected getStringFromGuestMemoryTruncate(memory: WasmMemory, offset: number, len: number): string;
    protected getStringFromGuestMemoryNoLimit(memory: WasmMemory, offset: number, len: number): string;
    protected setStringInGuestMemory(data_offset: number, data_len_offset: number, value: string): wasm_status;
    protected restoreGuestMemory(wasmInitialMemory: Buffer): void;
    protected copyDataToGuestMemory(data: Uint8Array, data_offset: number, len_offset: number): wasm_status;
}
