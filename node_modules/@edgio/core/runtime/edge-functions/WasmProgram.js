"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WasmError = exports.wasm_status = exports.SIZEOF_wasi_iovec_t = void 0;
const WasmMemory_1 = __importDefault(require("./WasmMemory"));
// In WASM, this is the size of the wasi_iovec_t struct.
exports.SIZEOF_wasi_iovec_t = 8;
// Maximum size of read from the guest memory. Use for all string except the body functions.
const MAX_GUEST_STRING_BYTES = 10 * 1024;
// Connascence of meaning and values with the wasm_status from mod_wasm.
var wasm_status;
(function (wasm_status) {
    wasm_status[wasm_status["ok"] = 0] = "ok";
    wasm_status[wasm_status["system_error"] = 1] = "system_error";
    wasm_status[wasm_status["not_found"] = 2] = "not_found";
    wasm_status[wasm_status["insufficient_buffer"] = 3] = "insufficient_buffer";
    wasm_status[wasm_status["invalid_args_count"] = 4] = "invalid_args_count";
    wasm_status[wasm_status["invalid_argument"] = 5] = "invalid_argument";
    wasm_status[wasm_status["invalid_operation"] = 6] = "invalid_operation";
    wasm_status[wasm_status["invalid_id"] = 7] = "invalid_id";
    wasm_status[wasm_status["limit_exceeded"] = 8] = "limit_exceeded";
    wasm_status[wasm_status["client_abandoned"] = 9] = "client_abandoned";
})(wasm_status = exports.wasm_status || (exports.wasm_status = {}));
class WasmError {
    static ok() {
        return new WasmError(wasm_status.ok, undefined);
    }
    constructor(status, message) {
        this.status = wasm_status.ok;
        this.status = status;
        this.message = message;
    }
}
exports.WasmError = WasmError;
/// Base class for all Wasm programs providing common functionality.
class WasmProgram {
    setInstance(instance) {
        this.instance = instance;
    }
    /// Returns the DataView with the memory of the WASM function.
    getGuestMemory() {
        // @ts-ignore
        return new WasmMemory_1.default(new DataView(this.instance.exports.memory.buffer));
    }
    getStringFromGuestMemory(memory, offset, len) {
        if (len > MAX_GUEST_STRING_BYTES) {
            return new WasmError(wasm_status.invalid_argument, `(length ${len} > ${MAX_GUEST_STRING_BYTES} bytes) Argument is too long`);
        }
        return this.getStringFromGuestMemoryNoLimit(memory, offset, len);
    }
    getStringFromGuestMemoryTruncate(memory, offset, len) {
        len = Math.min(len, MAX_GUEST_STRING_BYTES);
        return this.getStringFromGuestMemoryNoLimit(memory, offset, len);
    }
    getStringFromGuestMemoryNoLimit(memory, offset, len) {
        return new TextDecoder().decode(memory.slice(offset, offset + len));
    }
    setStringInGuestMemory(data_offset, data_len_offset, value) {
        const data = new TextEncoder().encode(value);
        return this.copyDataToGuestMemory(data, data_offset, data_len_offset);
    }
    // Used to restore the guest memory to the state immediately after initialization.
    restoreGuestMemory(wasmInitialMemory) {
        this.getGuestMemory().setBuffer(wasmInitialMemory);
    }
    // Copies the given data into the WASM memory at the given offset.
    // Connascence of algorithm with the `copy_to_guest` function in the mod_wasm.
    // See hostcalls.h
    copyDataToGuestMemory(data, data_offset, len_offset) {
        const memory = this.getGuestMemory();
        // Read the length of the data buffer.
        const len = memory.getUint32(len_offset);
        // Always write the size of the data into the given len pointer so that guest
        // can know how much data there is and grow the buffer if needed.
        memory.setUint32(len_offset, data.byteLength);
        if (data.byteLength === 0) {
            return wasm_status.ok;
        }
        if (data.byteLength > len) {
            // Signal that the guest needs to grow the buffer.
            return wasm_status.insufficient_buffer;
        }
        // Copy the data into the memory.
        // TODO: https://jira.atlas.llnw.com/browse/EAPPS-16
        // Optimize copying of the memory. See details in the JIRA ticket.
        for (let i = 0; i < data.byteLength; i++) {
            memory.setUint8(data_offset + i, data[i]);
        }
        return wasm_status.ok;
    }
}
exports.default = WasmProgram;
