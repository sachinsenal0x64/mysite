"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Serializer = void 0;
const buffer_1 = require("buffer");
/**
 * This class provides universal way to serialize and deserialize data
 * which works in NodeJs and browser environment.
 */
class Serializer {
    static serialize(data) {
        return this.getSerializerImplementation().serialize(data);
    }
    static deserialize(data) {
        return this.getSerializerImplementation().deserialize(data);
    }
}
exports.Serializer = Serializer;
_a = Serializer;
Serializer.getSerializerImplementation = () => {
    // return immediately cached version if available
    if (_a.cachedSerializer)
        return _a.cachedSerializer;
    try {
        // try to load the v8 serializer implementation
        _a.cachedSerializer = require('v8');
    }
    catch (e) {
        // fallback to the simpler implementation for browser environment
        _a.cachedSerializer = {
            serialize: (data) => {
                return buffer_1.Buffer.from(new TextEncoder().encode(JSON.stringify(data)).buffer);
            },
            deserialize: (data) => {
                // The SharedArrayBuffer view cannot be passed to the TextDecoder directly,
                // that's why we have to copy the data to a new buffer here.
                const dataCopy = buffer_1.Buffer.alloc(data.length);
                data.copy(dataCopy);
                return JSON.parse(new TextDecoder().decode(dataCopy.buffer));
            },
        };
    }
    return _a.cachedSerializer;
};
