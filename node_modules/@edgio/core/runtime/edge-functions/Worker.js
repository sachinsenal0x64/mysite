"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parentPort = exports.getParentPort = exports.getWorkerImplementation = exports.Worker = void 0;
/**
 * This class provides an universal worker implementation
 * which works same in NodeJs and browser environment.
 */
class Worker {
    constructor(filename) {
        const WorkerImplementation = (0, exports.getWorkerImplementation)();
        this.workerInstance = new WorkerImplementation(filename);
    }
    terminate() {
        this.workerInstance.terminate();
    }
    postMessage(message, transfer) {
        this.workerInstance.postMessage(message, transfer);
    }
}
exports.Worker = Worker;
/**
 * Returns the worker implementation based on the environment.
 * The worker_threads for NodeJS and Web Workers for the others.
 */
const getWorkerImplementation = () => {
    try {
        return require('worker_threads').Worker;
    }
    catch (e) {
        return window.Worker;
    }
};
exports.getWorkerImplementation = getWorkerImplementation;
/**
 * Returns the parent port of the current worker
 * when called in a worker thread.
 */
const getParentPort = () => {
    try {
        return require('worker_threads').parentPort;
    }
    catch (e) {
        return self;
    }
};
exports.getParentPort = getParentPort;
/**
 * Returns the parent port of the current worker
 */
exports.parentPort = (0, exports.getParentPort)();
