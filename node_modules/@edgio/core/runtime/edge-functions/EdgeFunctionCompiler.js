"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileEdgeFunction = void 0;
const WasmProgram_1 = __importStar(require("./WasmProgram"));
const buffer_1 = require("buffer");
const EdgeFunctionsWasmManager_1 = __importDefault(require("./EdgeFunctionsWasmManager"));
/// Encapsulates execution of quickjs-compiler Wasm program.
class EdgeFunctionCompilation extends WasmProgram_1.default {
    constructor(source, sourceFilename) {
        super();
        this.source = source;
        this.sourceFilename = sourceFilename;
    }
    async run() {
        // Load the quickjs-compiler once per lifetime of the instance.
        const wasmBytes = await EdgeFunctionsWasmManager_1.default.getQuickjsCompilerBytes();
        const importObject = this.getQuickJsImportObject(this.source, this.sourceFilename);
        // Do not use WebAssembly.Instance() here due to Buffer limits in browser environments.
        const { instance } = await WebAssembly.instantiate(wasmBytes, importObject);
        this.setInstance(instance);
        // `run` is the entry point of the WASM module.
        // @ts-ignore
        this.instance.exports.run();
        if (this.bytecode) {
            return this.bytecode;
        }
        else if (this.error) {
            throw new Error(this.error);
        }
        else {
            throw new Error('Compilation neither generated bytecode nor an error.');
        }
    }
    /// Returns the import object for the QuickJS WASM function which includes both WASI
    /// interface and custom hostcalls as defined in the Sailfish repository.
    getQuickJsImportObject(source, sourceFilename) {
        return {
            env: {
                hostcall_get_last_host_error_message: (message_offset, message_len) => {
                    if (!this.lastHostErrorMessage) {
                        return WasmProgram_1.wasm_status.not_found;
                    }
                    return this.setStringInGuestMemory(message_offset, message_len, this.lastHostErrorMessage);
                },
                hostcall_set_guest_error_message: (message_offset, message_len) => {
                    const memory = this.getGuestMemory();
                    this.guestErrorMessage = this.getStringFromGuestMemoryTruncate(memory, message_offset, message_len);
                    return WasmProgram_1.wasm_status.ok;
                },
                hostcall_compiler_read_javascript_filename: (data_offset, data_len_offset) => {
                    return this.setStringInGuestMemory(data_offset, data_len_offset, sourceFilename);
                },
                hostcall_compiler_read_javascript: (data_offset, data_len_offset) => {
                    return this.setStringInGuestMemory(data_offset, data_len_offset, source);
                },
                hostcall_compiler_write_bytecode: (data_offset, data_len) => {
                    const memory = super.getGuestMemory();
                    const data = memory.slice(data_offset, data_offset + data_len);
                    this.bytecode = buffer_1.Buffer.from(data);
                },
                hostcall_panic_hook: (msg_offset, msg_length) => {
                    const memory = this.getGuestMemory();
                    const msg = this.getStringFromGuestMemoryTruncate(memory, msg_offset, msg_length);
                    this.error = msg;
                },
            },
            wasi_snapshot_preview1: {
                fd_write: (fd, iovs_offset, iovs_length, bw_offset) => {
                    var _a, _b;
                    const STDOUT_FD = 1;
                    const STDERR_FD = 2;
                    // Only accept writes to stdout/stderr
                    if (fd != STDOUT_FD && fd != STDERR_FD) {
                        throw new WebAssembly.RuntimeError('Write not allowed');
                    }
                    const memory = this.getGuestMemory();
                    let bytesWritten = 0;
                    // Write all the buffers as they were given to us.
                    for (let i = 0; i < iovs_length; i++) {
                        const iov_base = memory.getUint32(iovs_offset + WasmProgram_1.SIZEOF_wasi_iovec_t * i);
                        const iov_len = memory.getUint32(iovs_offset + WasmProgram_1.SIZEOF_wasi_iovec_t * i + Uint32Array.BYTES_PER_ELEMENT);
                        const iovs = buffer_1.Buffer.from(memory.slice(iov_base, iov_base + iov_len));
                        switch (fd) {
                            case STDOUT_FD:
                                (_a = process === null || process === void 0 ? void 0 : process.stdout) === null || _a === void 0 ? void 0 : _a.write(iovs);
                                break;
                            case STDERR_FD:
                                (_b = process === null || process === void 0 ? void 0 : process.stderr) === null || _b === void 0 ? void 0 : _b.write(iovs);
                                break;
                            default:
                                throw new WebAssembly.RuntimeError('Write not allowed');
                        }
                        bytesWritten += iov_len;
                    }
                    memory.setUint32(bw_offset, bytesWritten);
                    return 0;
                },
                environ_get: (..._args) => {
                    throw new WebAssembly.RuntimeError('environ_get not supported');
                },
                // This function is always called so we are forced to implement it.
                // environ_sizes_get is supposed to write the number of arguments but we don't allow access to any arguments.
                environ_sizes_get: (environCountPtr, environBufSizePtr) => {
                    const memory = this.getGuestMemory();
                    memory.setUint32(environCountPtr, 0);
                    memory.setUint32(environBufSizePtr, 0);
                    return 0;
                },
                clock_time_get: (_clockId, _precision, tsOffset) => {
                    const memory = this.getGuestMemory();
                    // We don't expose any clocks so we just return 0.
                    memory.setBigUint64(tsOffset, BigInt(0));
                },
                fd_close: (..._args) => {
                    throw new WebAssembly.RuntimeError('fs_close not supported');
                },
                fd_fdstat_get: (..._args) => {
                    throw new WebAssembly.RuntimeError('fd_fdstat_get not supported');
                },
                fd_prestat_get: (..._args) => {
                    throw new WebAssembly.RuntimeError('fd_prestat_get not supported');
                },
                fd_prestat_dir_name: (..._args) => {
                    throw new WebAssembly.RuntimeError('fd_prestat_dir_name not supported');
                },
                fd_seek: (..._args) => {
                    throw new WebAssembly.RuntimeError('fd_seek not supported');
                },
                proc_exit: (exitCode) => {
                    throw new WebAssembly.RuntimeError(`Compilation terminated with error code ${exitCode}`);
                },
            },
        };
    }
}
/// Compiles the given edge function and returns the compiled bytecode.
async function compileEdgeFunction(source, sourceFilename) {
    const compilation = new EdgeFunctionCompilation(source, sourceFilename);
    return await compilation.run();
}
exports.compileEdgeFunction = compileEdgeFunction;
