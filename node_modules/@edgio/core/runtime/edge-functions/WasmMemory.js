"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// WASM is little endian.
const LITTLE_ENDIAN = true;
class WasmMemory {
    constructor(memory) {
        this.memory = memory;
    }
    /**
     * Gets the Float32 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getFloat32(byteOffset) {
        return this.memory.getFloat32(byteOffset, LITTLE_ENDIAN);
    }
    /**
     * Gets the Float64 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getFloat64(byteOffset) {
        return this.memory.getFloat64(byteOffset, LITTLE_ENDIAN);
    }
    /**
     * Gets the Int8 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getInt8(byteOffset) {
        return this.memory.getInt8(byteOffset);
    }
    /**
     * Gets the Int16 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getInt16(byteOffset) {
        return this.memory.getInt16(byteOffset, LITTLE_ENDIAN);
    }
    /**
     * Gets the Int32 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getInt32(byteOffset) {
        return this.memory.getInt32(byteOffset, LITTLE_ENDIAN);
    }
    /**
     * Gets the Uint8 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getUint8(byteOffset) {
        return this.memory.getUint8(byteOffset);
    }
    /**
     * Gets the Uint16 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getUint16(byteOffset) {
        return this.memory.getUint16(byteOffset, LITTLE_ENDIAN);
    }
    /**
     * Gets the Uint32 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getUint32(byteOffset) {
        return this.memory.getUint32(byteOffset, LITTLE_ENDIAN);
    }
    /**
     * Stores an Float32 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     */
    setFloat32(byteOffset, value) {
        this.memory.setFloat32(byteOffset, value, LITTLE_ENDIAN);
    }
    /**
     * Stores an Float64 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     */
    setFloat64(byteOffset, value) {
        this.memory.setFloat64(byteOffset, value, LITTLE_ENDIAN);
    }
    /**
     * Stores an Int8 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     */
    setInt8(byteOffset, value) {
        this.memory.setInt8(byteOffset, value);
    }
    /**
     * Stores an Int16 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     */
    setInt16(byteOffset, value) {
        this.memory.setInt16(byteOffset, value, LITTLE_ENDIAN);
    }
    /**
     * Stores an Int32 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     */
    setInt32(byteOffset, value) {
        this.memory.setInt32(byteOffset, value, LITTLE_ENDIAN);
    }
    /**
     * Stores an Uint8 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     */
    setUint8(byteOffset, value) {
        this.memory.setUint8(byteOffset, value);
    }
    /**
     * Stores an Uint16 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     */
    setUint16(byteOffset, value) {
        this.memory.setUint16(byteOffset, value, LITTLE_ENDIAN);
    }
    /**
     * Stores an Uint32 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     */
    setUint32(byteOffset, value) {
        this.memory.setUint32(byteOffset, value, LITTLE_ENDIAN);
    }
    /**
     * Gets the BigInt64 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getBigInt64(byteOffset) {
        return this.memory.getBigInt64(byteOffset, LITTLE_ENDIAN);
    }
    /**
     * Gets the BigUint64 value at the specified byte offset from the start of the memory. There is
     * no alignment constraint; multi-byte values may be fetched from any offset.
     * @param byteOffset The place in the memory at which the value should be retrieved.
     */
    getBigUint64(byteOffset) {
        return this.memory.getBigUint64(byteOffset, LITTLE_ENDIAN);
    }
    /**
     * Stores a BigInt64 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     * @param littleEndian If false or undefined, a big-endian value should be written.
     */
    setBigInt64(byteOffset, value) {
        this.memory.setBigInt64(byteOffset, value, LITTLE_ENDIAN);
    }
    /**
     * Stores a BigUint64 value at the specified byte offset from the start of the memory.
     * @param byteOffset The place in the memory at which the value should be set.
     * @param value The value to set.
     * @param littleEndian If false or undefined, a big-endian value should be written.
     */
    setBigUint64(byteOffset, value) {
        this.memory.setBigUint64(byteOffset, value, LITTLE_ENDIAN);
    }
    /**
     * Replaces the entire memory with the given buffer. Use for warm starts.
     * @param wasmInitialMemory The memory buffer to set
     */
    setBuffer(wasmInitialMemory) {
        for (let i = 0; i < wasmInitialMemory.length; i++) {
            this.memory.setUint8(i, wasmInitialMemory[i]);
        }
    }
    /**
     * Returns the current byte length of the memory.
     * @returns Byte length of current memory buffer.
     */
    getByteLength() {
        return this.memory.buffer.byteLength;
    }
    /**
     * Returns an array buffer between in [start, end) range of the memory.
     * @param start The place in the memory where the slice begins.
     * @param end Optional: The place in the memory where the slice ends. Default is the end of the memory.
     * @returns ArrayBuffer containing the slice of the memory.
     */
    slice(start, end) {
        return this.memory.buffer.slice(start, end);
    }
}
exports.default = WasmMemory;
