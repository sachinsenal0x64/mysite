"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An actual cache key derived from a request per the user's CustomCacheKey specification
 */
class CacheKey {
    constructor(request) {
        var _a;
        this.headers = [];
        this.cookies = [];
        const { host } = request.headers;
        this.method = (_a = request.method) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        this.query = this.excludeEdgioQueryParams(request.query || {});
        this.pathname = new URL(request.url, `http://${host}`).pathname;
    }
    resetQueryParams(request) {
        this.query = this.excludeEdgioQueryParams(request.query);
    }
    /**
     * We always ignore edgio_* query params when computing the cache key so that things like edgio_prefetch don't cache bust
     * @param query
     */
    excludeEdgioQueryParams(query) {
        const result = {};
        for (let name in query) {
            if (!name.startsWith('edgio_')) {
                result[name] = query[name];
            }
        }
        return result;
    }
    /**
     * Returns an array of values in the object sorted by the key
     * We sort query params so that different orderings will result in a hit
     * @param source Any object of key/value pairs, e.g. query, headers, cookies, etc...
     */
    toSortedArray(source) {
        return Object.keys(source)
            .sort()
            .map(key => [key, source[key]]);
    }
    toString() {
        const res = JSON.stringify({
            pathname: this.pathname,
            method: this.method,
            headers: [...this.headers].sort(),
            cookies: [...this.cookies].sort(),
            query: this.toSortedArray(this.query),
            expressions: this.expressions,
        });
        return res;
    }
}
exports.default = CacheKey;
