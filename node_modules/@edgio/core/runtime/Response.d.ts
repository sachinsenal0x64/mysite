/// <reference types="node" />
export type ResponseHeaders = {
    [key: string]: unknown;
};
/**
 * Represents an outgoing response.
 */
export default interface Response {
    /**
     * The HTTP status code
     */
    statusCode?: number;
    /**
     * The HTTP status message
     */
    statusMessage?: string;
    /**
     * The response body as a string or a Buffer
     */
    body?: string | Buffer;
    /**
     * Writes the response data
     * @param data The HTTP data
     * @private we shouldnt combine body and write in compute - at the moment, we'll keep using body
     */
    write: (data: any) => void;
    /**
     * Ends the response
     * @private users shouldnt end response from compute
     */
    end: () => void;
    /**
     * Allows to wait for the whole stream to be processed / flushed to client
     * @private users shouldnt await flush from compute
     */
    waitForFlush: () => void;
    /**
     * Allows to clear previously written chunks
     * @private
     */
    clear: () => void;
    /**
     * Sets a header
     * @param name The name of the header to set
     * @param value The value to set
     */
    setHeader: (name: string, value: unknown) => void;
    /**
     * Gets the first value of a header
     * @param name The name of the header to return
     * @returns The value of the header
     */
    getHeader: (name: string) => unknown;
    /**
     * Gets all headers as key/value pairs.
     */
    getHeaders: () => ResponseHeaders;
    /**
     * Removes a header
     * @param name The header to remove
     */
    removeHeader: (name: string) => void;
}
