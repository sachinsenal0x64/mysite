/// <reference types="node" />
/// <reference types="node" />
import { UrlWithParsedQuery } from 'url';
import http from 'http';
import Request from './Request';
import Response from './Response';
import { OriginBackends, Origins } from '../types';
/**
 * Options for a single fetch request.
 * All of these options are applied only to the request sent to upstream
 * and don't modify the original request object.
 * @private
 */
export interface BackendFetchOptions {
    /**
     * Removes the "=" from search parameters that have no value. So for example:
     * "http://domain.com?foo=&bar=" becomes "http://domain.com?foo&bar"
     */
    removeEmptySearchParamValues?: boolean;
    /**
     * Additional headers to send upstream
     */
    headers?: {
        [key: string]: string;
    };
    /**
     * The path for the URL to request from the upstream site. You can reference variables
     * captured by the route pattern using `:variable` there.
     */
    path?: string | (() => string | undefined);
    /**
     * Whether or not the parent will create additional requests mapping to same response
     */
    followRedirects?: boolean;
}
/**
 * @private
 */
export default class Backend {
    protected config: OriginBackends;
    protected hostHeader?: string;
    protected origin: Origins;
    static setImpl(implementation: {
        new (config: OriginBackends): Backend;
    }): void;
    static create(config: OriginBackends, origin: Origins): Backend;
    constructor(config: OriginBackends, origin: Origins);
    /**
     * Sends a request using the proxy.
     * @param req The request being sent.
     * @param res The response for the request.
     * @param options Options for this fetch request.
     */
    fetch(req: Request, res: Response, options?: BackendFetchOptions): Promise<void>;
    /**
     * Returns proxy configuration for http-proxy
     * @returns proxy target url
     */
    protected getProxyTarget(req: Request): UrlWithParsedQuery;
    /**
     * Returns true if the URL points to the local JS backend, otherwise false.
     * @param url
     * @returns
     */
    private isLocal;
    /**
     * Returns proxy configuration object for node-fetch
     * @param originUrl
     * @param req
     * @param options
     */
    protected getProxyRequestOptions(originUrl: UrlWithParsedQuery, req: Request, options?: BackendFetchOptions): http.RequestOptions;
}
