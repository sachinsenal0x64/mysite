"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-nocheck
const url_1 = require("url");
const lodash_1 = require("lodash");
class MockRequest {
    constructor(url, options = {}) {
        this.secure = true;
        this.protocol = '';
        this.httpVersion = '';
        this.rawHeaders = [];
        this.port = 0;
        this.method = 'GET';
        this.socket = {
            remoteAddress: '127.0.0.1',
        };
        this.headers = {
            host: 'jest.edgio.co',
        };
        this.connection = {
            remoteAddress: '127.0.0.1',
        };
        this.getHeader = jest.fn(key => this.headers[key.toLowerCase()]);
        this.getHeaders = jest.fn(() => this.headers);
        this.setHeader = jest.fn((key, value) => (this.headers[key.toLowerCase()] = value));
        this.updateHeader = jest.fn();
        this.removeHeader = jest.fn(key => delete this.headers[key.toLowerCase()]);
        this.on = jest.fn((event, cb) => {
            if (event === 'end') {
                cb();
            }
        });
        const location = new url_1.URL(url);
        const headers = { host: location.hostname, ...(options.headers || {}) };
        const rawHeaders = options.rawHeaders;
        const query = {};
        for (const [key, value] of location.searchParams) {
            query[key] = value;
        }
        Object.assign(this, {
            location,
            secure: location.protocol === 'https:',
            url: location.pathname + location.search,
            originalUrl: location.pathname + location.search,
            path: location.pathname,
            port: location.port,
            protocol: location.protocol === 'https:' ? 'https' : 'http',
            query,
            body: '',
            method: options.method ? options.method.toLowerCase() : 'get',
            ...options,
            headers,
            httpVersion: '1.1',
            rawHeaders: rawHeaders
                ? (0, lodash_1.flatten)(rawHeaders)
                : Object.keys(headers).flatMap(k => [k, headers[k]]),
        });
    }
}
exports.default = MockRequest;
