"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const createRouteMock_1 = __importDefault(require("./createRouteMock"));
const RequestContext_1 = __importDefault(require("../../runtime/RequestContext"));
const Cache_1 = __importDefault(require("../../runtime/Cache"));
const PropertyContext_1 = __importDefault(require("../../runtime/PropertyContext"));
const config_1 = require("../../config");
const LambdaResponse_1 = __importDefault(require("../../runtime/LambdaResponse"));
/**
 * Runs the provided path against the router, returning the mocked response
 * @param router A router instance
 * @param path The path, or result from `createRouteMock`, to run on the router
 * @returns Promise<MockResponse>
 */
async function runRoute(router, path) {
    let request, response;
    if (typeof path === 'string') {
        ;
        ({ request, response } = (0, createRouteMock_1.default)(path));
    }
    else {
        ;
        ({ request, response } = path);
    }
    const lambdaResponse = new LambdaResponse_1.default();
    response.__proto__ = lambdaResponse;
    const cache = new Cache_1.default();
    const config = (0, config_1.getConfig)();
    const propertyContext = new PropertyContext_1.default(config);
    await new RequestContext_1.default({
        request: request,
        response: response,
        propertyContext,
        rules: router.rules,
        cache,
        functions: {},
        interpolationValues: config.interpolationValues,
    }).executeSimulator();
    return response;
}
exports.default = runRoute;
