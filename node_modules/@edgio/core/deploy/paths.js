"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getJsInternalPath = exports.getJsAppPath = exports.getStaticAssetManifestPath = exports.getConfigPath = exports.getRouterPath = exports.pathForBackend = exports.STATIC_ASSET_EXPIRATION_FILE_NAME = exports.STATIC_ASSET_MANIFEST_FILE_NAME = exports.CONFIG_FILE_NAME = exports.ROUTES_FILE_NAME = exports.TMP_DIR = exports.SOURCES_DIR = exports.PERMANENT_ASSETS_DIR = exports.ASSETS_DIR = exports.EDGE_FUNCTIONS_QUICKJS_BYTECODE_PATH = exports.EDGE_FUNCTIONS_QUICKJS_BYTECODE_FILENAME = exports.EDGE_FUNCTIONS_INDEX_PATH = exports.EDGE_FUNCTIONS_BUNDLE_PATH = exports.EDGE_FUNCTIONS_BUNDLE_FILENAME = exports.EDGE_FUNCTION_SOURCES_FILENAME = exports.EDGE_FUNCTIONS_INDEX_FILENAME = exports.JS_APP_DIR = exports.JS_APP_DIR_NAME = exports.JS_INTERNAL_DIR = exports.JS_INTERNAL_DIR_NAME = exports.LAMBDA_DIR = exports.EDGIO_DIR = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const environment_1 = require("../environment");
/**
 * The .edgio build directory
 */
exports.EDGIO_DIR = '.edgio';
/**
 * The destination directory with entrypoint for lambda function.
 * This directory contains two directories: internal and app.
 */
exports.LAMBDA_DIR = (0, path_1.join)(exports.EDGIO_DIR, 'lambda');
/**
 * The name of destination directory for our internal JS files such as
 * handler, backends, router etc...
 */
exports.JS_INTERNAL_DIR_NAME = 'internal';
/**
 * The relative path to destination directory for our internal JS files such as
 * handler, backends, router etc...
 */
exports.JS_INTERNAL_DIR = (0, path_1.join)(exports.LAMBDA_DIR, exports.JS_INTERNAL_DIR_NAME);
/**
 * The name of destination directory for user's file with JS code
 * with server and its dependencies
 */
exports.JS_APP_DIR_NAME = 'app';
/**
 * The relative path to destination directory for user's file with JS code
 * with server and its dependencies
 */
exports.JS_APP_DIR = (0, path_1.join)(exports.LAMBDA_DIR, exports.JS_APP_DIR_NAME);
/**
 * The name of the bundled edge functions index file
 */
exports.EDGE_FUNCTIONS_INDEX_FILENAME = '__edge-functions-index__.js';
/**
 * The name of the file containing edge function source code
 */
exports.EDGE_FUNCTION_SOURCES_FILENAME = '__edge-function-sources__.json';
/**
 * The name of the bundled edge functions file
 */
exports.EDGE_FUNCTIONS_BUNDLE_FILENAME = 'edge-function.js';
/**
 * The path of the bundled edge functions file
 */
exports.EDGE_FUNCTIONS_BUNDLE_PATH = (0, path_1.join)(exports.JS_INTERNAL_DIR, exports.EDGE_FUNCTIONS_BUNDLE_FILENAME);
/**
 * The path to the edge functions index file
 */
exports.EDGE_FUNCTIONS_INDEX_PATH = (0, path_1.join)(exports.JS_INTERNAL_DIR, exports.EDGE_FUNCTIONS_INDEX_FILENAME);
/**
 * The name of the bundled edge functions index compiled QuickJS bytecode file
 */
exports.EDGE_FUNCTIONS_QUICKJS_BYTECODE_FILENAME = '__edge-functions__.qbc';
/**
 * The path to the bundled edge functions index compiled QuickJS bytecode file
 */
exports.EDGE_FUNCTIONS_QUICKJS_BYTECODE_PATH = (0, path_1.join)(exports.JS_INTERNAL_DIR, exports.EDGE_FUNCTIONS_QUICKJS_BYTECODE_FILENAME);
/**
 * The destination directory for static assets
 */
exports.ASSETS_DIR = (0, path_1.join)(exports.EDGIO_DIR, 's3');
exports.PERMANENT_ASSETS_DIR = (0, path_1.join)(exports.EDGIO_DIR, 's3-permanent');
/**
 * The directory into which source code is copied for debugging purposes
 */
exports.SOURCES_DIR = (0, path_1.join)(exports.EDGIO_DIR, 'src');
/**
 * The directory for temporary files during the build process.
 * This directory is cleaned after the build process is complete.
 */
exports.TMP_DIR = (0, path_1.join)(exports.EDGIO_DIR, 'tmp');
/**
 * The name of the compiled routes file
 */
exports.ROUTES_FILE_NAME = 'routes.cjs';
/**
 * The name of the compiled edgio config file
 */
exports.CONFIG_FILE_NAME = 'edgio.config.cjs';
/**
 * The static asset manifest file name
 * @private
 */
exports.STATIC_ASSET_MANIFEST_FILE_NAME = 'static-asset-manifest.json';
/**
 * The static asset expiration file name
 * @private
 */
exports.STATIC_ASSET_EXPIRATION_FILE_NAME = 'static-asset-expiration.json';
/**
 * Returns the destination path within the lambda dir for the specified backend
 * @param backend A backend name
 * @return a file path
 */
function pathForBackend(backend) {
    return (0, path_1.join)('__backends__', `${backend}.cjs`);
}
exports.pathForBackend = pathForBackend;
/**
 * Returns the path to the routes.js file with the router.
 * @param config The config from edgio.config.js
 * @param cwd The current working directory
 * @returns
 */
function getRouterPath(config) {
    // When app is running in production mode,
    // the built router file from the internal folder is returned.
    // Otherwise, the router file from the project root folder is returned.
    const folder = (0, environment_1.isProductionBuild)() && (0, environment_1.isCloud)() ? getJsInternalPath() : process.cwd();
    const result = ((config === null || config === void 0 ? void 0 : config.routes)
        ? [(0, path_1.join)(process.cwd(), config.routes)]
        : [(0, path_1.join)(folder, 'routes.js'), (0, path_1.join)(folder, 'routes.ts'), (0, path_1.join)(folder, 'routes.cjs')]).find(fs_1.existsSync);
    if (result == null) {
        const srcFile = (config === null || config === void 0 ? void 0 : config.routes) || `routes.js, routes.ts, or routes.cjs`;
        throw new Error(`Edgio routes file not found. Please create ${srcFile} in the root directory of your project.`);
    }
    return result;
}
exports.getRouterPath = getRouterPath;
/**
 * Gets the path to edgio.config.js file
 * @returns
 */
function getConfigPath() {
    // When app is running in production mode,
    // the built config file from the internal folder is returned.
    // Otherwise, the config file from the project root folder is returned.
    const folder = (0, environment_1.isProductionBuild)() && (0, environment_1.isCloud)() ? getJsInternalPath() : process.cwd();
    const result = [
        (0, path_1.join)(folder, 'edgio.config.js'),
        (0, path_1.join)(folder, 'edgio.config.ts'),
        (0, path_1.join)(folder, 'edgio.config.cjs'),
    ].find(fs_1.existsSync);
    if (result == null) {
        throw new Error('Edgio config file not found. Please create edgio.config.js or edgio.config.cjs in the root directory of your project.');
    }
    return result;
}
exports.getConfigPath = getConfigPath;
/**
 * Gets the path to static-asset-manifest.json file
 * @returns
 */
function getStaticAssetManifestPath() {
    const filePath = (0, path_1.join)(getJsInternalPath(), exports.STATIC_ASSET_MANIFEST_FILE_NAME);
    if (!(0, fs_1.existsSync)(filePath)) {
        throw new Error(`The '${filePath}' file was not found. Please try to re-run 'edgio build'.`);
    }
    return filePath;
}
exports.getStaticAssetManifestPath = getStaticAssetManifestPath;
/**
 * Returns the correct path to the '.edgio/lambda/app' folder
 * with user's JS code in both dev and prod modes.
 * @param cwd
 * @returns
 */
function getJsAppPath(cwd = process.cwd()) {
    const pathInDev = (0, path_1.join)(cwd, exports.JS_APP_DIR);
    const pathInProduction = (0, path_1.join)(cwd, '..', exports.JS_APP_DIR_NAME);
    const path = (0, environment_1.isProductionBuild)() && (0, environment_1.isCloud)() ? pathInProduction : pathInDev;
    return (0, fs_1.existsSync)(path) ? path : process.cwd();
}
exports.getJsAppPath = getJsAppPath;
/**
 * Returns the path to the '.edgio/lambda/internal' folder
 * with our edgio's JS files such as routes.cjs or edgio.config.cjs.
 * @param cwd
 * @returns
 */
function getJsInternalPath(cwd = process.cwd()) {
    const pathInDev = (0, path_1.join)(cwd, exports.JS_INTERNAL_DIR);
    const pathInProduction = (0, path_1.join)(cwd, '..', exports.JS_INTERNAL_DIR_NAME);
    const path = (0, environment_1.isProductionBuild)() && (0, environment_1.isCloud)() ? pathInProduction : pathInDev;
    return (0, fs_1.existsSync)(path) ? path : process.cwd();
}
exports.getJsInternalPath = getJsInternalPath;
