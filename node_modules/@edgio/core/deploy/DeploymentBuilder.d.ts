/// <reference types="node" />
import { CopyOptionsSync } from 'fs-extra';
import shell from 'shelljs';
import { BuildOptions } from '.';
import { InjectManifestOptions } from 'workbox-build';
/**
 * The class helps you bundle apps for deployment on Edgio.
 */
export default class DeploymentBuilder {
    /**
     * The root directory of the user's project
     */
    readonly appDir: string;
    /**
     * The .edgio build directory
     */
    readonly buildDir: string;
    /**
     * The .edgio/lambda directory
     */
    readonly lambdaDir: string;
    /**
     * The .edgio/lambda/internal directory
     * for our internal files such as routes.cjs or edgio.config.cjs
     */
    readonly jsInternalDir: string;
    /**
     * The .edgio/lambda/app directory for all the user's code
     */
    readonly jsAppDir: string;
    /**
     * The .edgio/s3 directory for static assets
     */
    readonly staticAssetsDir: string;
    /**
     * The .edgio/s3-permanent directory for permanent static assets
     */
    readonly permanentStaticAssetsDir: string;
    /**
     * The .edgio/src directory for the source files
     */
    readonly sourcesDir: string;
    /**
     * The .edgio/tmp directory which will be cleaned up after the build
     */
    readonly tempDir: string;
    private assetExpiration;
    constructor(appDir?: string);
    /**
     * Logs a message to the console if process.env.debug is set to true
     * @param msg The message to log
     */
    log(...msg: any[]): void;
    /**
     * Runs a command.
     * @param command The command to run
     * @param options Options for shelljs
     * @return {Promise} A promise that resolves when the command is finished.
     */
    exec(command: string, options?: ExecOptions): Promise<unknown>;
    /**
     * Adds an asset to the lambda JS directory '.edgio/lambda/internal' with Edgio's code.
     * This function is used only by the DeploymentBuilder itself and not exposed to the connectors.
     * @param src The source path
     * @param dest An optional destination path within the '.edgio/lambda/internal' directory.
     * If not provided, the destination path will be the same as the source path.
     * @param options Options for copySync
     * @return a self reference, suitable for chaining
     * @private
     */
    addInternalJSAsset(src: string, dest?: string, options?: CopyOptionsSync): this;
    /**
     * Adds an asset to the lambda JS directory '.edgio/lambda/app' with user's code.
     * @param src The source path
     * @param dest An optional destination path within the '.edgio/lambda/app' directory.
     * If not provided, the destination path will be the same as the source path.
     * @param options Options for copySync
     * @return a self reference, suitable for chaining
     */
    addJSAsset(src: string, dest?: string, options?: CopyOptionsSync): this;
    /**
     * Copies a file or directory into .edgio/src
     * @param src
     */
    addSource(src: string): this;
    /**
     * Adds source files to the bundle based on:
     *
     *  - The `sources` property of edgio, or, if not present
     *  - All files committed to git.
     *
     * If sources is not present in edgio, and the project does not use git, an error will be thrown.
     */
    private addSources;
    /**
     * Adds the prod entry point from the connector attribute in edgio
     * @return a self reference, suitable for chaining
     */
    private addProdEntrypoint;
    /**
     * Adds a folder or file as static asset.
     * Also register directories as asset aliases when they contains an index.html file
     *
     * @param src The source path
     * @param dest An optional destination path in s3. If not provided, the destination path will be the same as the source path.
     * @return a self reference, suitable for chaining
     */
    addStaticAsset(src: string, dest?: string, { permanent, exclude }?: {
        permanent?: boolean;
        exclude?: string[];
    }): this;
    /**
     * Ensures that all path/to/dir/index.html files in S3 have an alias for /path/to/dir. This
     * allows the edge to simply forward URLs like /foo to S3 and have S3 respond with /foo/index.html.
     * THis is critical to the functionality of Gatsby, Next.js, and other static site builders.
     */
    private createStaticAssetAliases;
    /**
     * Ensures all assets in the "all", "js", and "ts" subdirectories of `defaultAppPath` are either already
     * present in the user's app or are copied over from `defaultAppPath`.
     * @param defaultAppPath
     * @return A self reference, suitable for chaining
     */
    addDefaultAppResources(defaultAppPath: string, replacer?: (content: string) => string): this;
    /**
     * Copies all the edgio scripts into the package.json file, if they don't already exist.
     * @param scriptsOverride Used to pass framework-specific script overrides
     * @param overrideExisting Set to true to override existing edgio script elements
     * @return A self reference, suitable for chaining
     */
    addDefaultEdgioScripts(scriptsOverride?: {}, overrideExisting?: boolean): this;
    /**
     * Copies a file
     * @param from the source path
     * @param to the destination path
     */
    copySync(from: string, to: string, copySyncOptions?: CopyOptionsSync): void;
    /**
     * Writes a file
     * @param to the destination path
     * @param content the contents of the file
     * @param encoding the encoding
     */
    writeFileSync(to: string, content: string): void;
    /**
     * Deletes all files in a directory
     * @param dir The directory to empty
     */
    emptyDirSync(dir: string): void;
    /**
     * Reads a file
     * @param path the file path
     * @param options Options for `fs.readFileSync`
     * @returns The file contents
     */
    readFileSync(path: string, { encoding }?: {
        encoding?: BufferEncoding | undefined;
    }): string;
    /**
     * Deletes a file
     * @param path The file to delete
     */
    removeSync(path: string): void;
    /**
     * Deletes the output of the previous build.
     */
    clearPreviousBuildOutput(): this;
    /**
     * Edgio version of @edgio/core.
     * @type {String}
     */
    static get platformVersion(): string;
    /**
     * Copies all of the standard assets into the JS and static asset bundles.  These are the same for any framework.
     */
    build(options?: BuildOptions): Promise<void>;
    /**
     * Creates the .edgio/lambda directory which gets deployed to the Edgio's serverless cloud.
     * @param param0
     * @param router
     * @param options
     */
    private createServerlessBundle;
    /**
     * Creates the .edgio/s3 and .edgio/s3-permanent directories, which get deployed to S3.
     * @param config
     * @param router
     */
    private createStaticAssetBundle;
    private createSourcesBundle;
    /**
     * Copies files to .edgio/s3 or .edgio/s3-permanent based on an staticAssets entry from
     * edgio.config.js.
     * @param config
     */
    private addStaticAssets;
    /**
     * Copies matching files to the destination directory
     * @param globs
     * @param destinationDir
     */
    private addAssets;
    /**
     * Builds the router and config.
     * @returns
     */
    private buildSources;
    private addMetadataFiles;
    /**
     * Returns true if the project uses yarn for bundling
     * @returns
     */
    private isYarn;
    /**
     * Adds all dependencies from package.json to the JS bundle (excluding devDependencies)
     */
    private includeNodeModules;
    /**
     * Copies the package.json file into the lambda and adjust all dependencies that
     * use file paths
     */
    private preparePackageJson;
    /**
     * Configures the TTL for a static asset. Once the TTL has expired, it will be refreshed
     * by forwarding requests for that asset to serverless.
     * @param path The path to the asset within the app
     * @param maxAgeSeconds The TTL in seconds
     * @return A self-reference, suitable for chaining
     */
    setStaticAssetExpiration(path: string, maxAgeSeconds: number, staleWhileRevalidateSeconds: number): this;
    /**
     * Creates contents of the edge control json file for configuring the CDN
     * @param routerPath The path to the router file
     * @param router The router instance
     * @returns The edge control json
     */
    private createEdgeControlJson;
    /**
     * Deletes all .map files from specified folder
     */
    deleteMapFiles(dir: string): void;
    /**
     * Builds the service worker and injects the static assets to preload into it.
     */
    buildServiceWorker(options: Partial<InjectManifestOptions>): Promise<void>;
    watchServiceWorker(srcPath?: string, destPath?: string): Promise<void>;
    /**
     * Prepends the path to the .edgio/temp dir to the specified path.
     * @param path
     * @returns
     */
    private createTempfile;
}
export interface ExecOptions extends shell.ExecOptions {
}
