"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* istanbul ignore file */
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const monorepoUtils_1 = require("../utils/monorepoUtils");
/**
 * Creates an exploded, tree shaken bundle that more easily fits within Lambda's size limits and
 * reduces code start times.
 * @param srcFile The entry point source file
 * @param outDir The output directory
 * @param outFile The output file name or relative path with filename
 */
async function bundleWithNft(srcFile, outDir, outFile = 'index.js') {
    const nodeFileTrace = loadNFT();
    process.stdout.write('> Bundling your app with @vercel/nft...');
    // We need to get the root of the monorepo for node_modules tracing
    // in case the project is inside a monorepo.
    const repoRoot = (0, monorepoUtils_1.findMonorepoRoot)(srcFile) || process.cwd();
    // Trace all dependencies required for running the file
    const { fileList } = await nodeFileTrace([srcFile], {
        base: repoRoot,
    });
    fileList.forEach((file) => {
        // @vercel/nft returns the relative path to repoRoot,
        // so we need to transform it to the relative path to the current working path.
        const srcFileRelative = (0, path_1.relative)(process.cwd(), (0, path_1.join)(repoRoot, file));
        // Adjust output file path, so the node_modules are put
        // to the root of the output directory
        const destFile = file.startsWith('node_modules/') ? file : srcFileRelative;
        // Create folder structure for output file
        (0, fs_extra_1.mkdirpSync)((0, path_1.dirname)((0, path_1.join)(outDir, destFile)));
        // Copy traced file to the output directory
        (0, fs_extra_1.copyFileSync)(srcFileRelative, (0, path_1.join)(outDir, destFile));
    });
    // Copy the entry file to the output directory
    // under the name specified by outFile if it doesn't exist
    const entryPoint = (0, path_1.join)(outDir, outFile);
    if (!(0, fs_extra_1.existsSync)(entryPoint)) {
        (0, fs_extra_1.mkdirpSync)((0, path_1.dirname)(entryPoint));
        (0, fs_extra_1.copyFileSync)(srcFile, entryPoint);
    }
    process.stdout.write(' done.\n');
}
exports.default = bundleWithNft;
function loadNFT() {
    try {
        const { nodeFileTrace } = require('@vercel/nft');
        return nodeFileTrace;
    }
    catch (e) {
        console.log('Required dependency @vercel/nft not found. Install @vercel/nft@^0.21.0 as a devDependency then retry this command.');
        process.exit(1);
    }
}
