"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* istanbul ignore file */
const shelljs_1 = __importDefault(require("shelljs"));
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
/**
 * Bundles an app info a single JS file with @vercel/ncc. This helps minimize the size of the lambda because of
 * it's efficient tree shaking. This can be a solution when your app is too large to fit within
 * the maximum size of a lambda.
 * @param srcFile The entry point source file
 * @param outDir The output directory
 * @param outFile The output file name or relative path with filename
 */
async function bundleWithNcc(srcFile, outDir, outFile = 'index.js') {
    console.log('> Bundling your app with @vercel/ncc...');
    loadNcc();
    await shelljs_1.default.exec(`npx ncc build -a -m -o ${outDir} ${srcFile}`);
    // Create folders if necessary
    // and rename the output index.js file to the outFile name
    const oldEntryPoint = (0, path_1.join)(outDir, 'index.js');
    const newEntryPoint = (0, path_1.join)(outDir, outFile);
    if (!(0, fs_extra_1.existsSync)(newEntryPoint)) {
        (0, fs_extra_1.mkdirpSync)((0, path_1.dirname)(newEntryPoint));
        (0, fs_extra_1.rename)(oldEntryPoint, newEntryPoint);
    }
    console.log('> done.');
}
exports.default = bundleWithNcc;
function loadNcc() {
    try {
        require('@vercel/ncc');
    }
    catch (e) {
        console.log('Required dependency @vercel/ncc not found. Install @vercel/ncc@^0.34.0 as a devDependency then retry this command.');
        process.exit(1);
    }
}
