"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Cache_1 = __importDefault(require("../runtime/Cache"));
const PropertyContext_1 = __importDefault(require("../runtime/PropertyContext"));
const RequestContext_1 = __importDefault(require("../runtime/RequestContext"));
/**
 * Given a set of rules and a request, return the matching rules. We'll use this feature in
 * the console to show the user which rules are matching for a given request.
 * @param rules
 * @param request
 * @returns
 */
function findMatchingRules(rules, request) {
    const response = {};
    const cache = new Cache_1.default();
    const property = {};
    const propertyContext = new PropertyContext_1.default(property);
    const context = new RequestContext_1.default({
        request,
        // @ts-ignore
        response,
        propertyContext,
        rules,
        cache,
        functions: {},
        interpolationValues: {},
    });
    rules.forEach((rule, i) => {
        // @ts-ignore
        rule.index = i;
    });
    const matching = new Set();
    context.forEachMatchingRule((_rule, index) => matching.add(index));
    return Array.from(matching);
}
exports.default = findMatchingRules;
