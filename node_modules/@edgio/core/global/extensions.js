"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable object-shorthand */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable no-nested-ternary */
/* eslint-disable func-names */
/* eslint-disable no-extend-native */
Object.defineProperty(exports, "__esModule", { value: true });
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const _global = (window /* browser */ || global) /* node */;
_global.fields = function fields() {
    return new Proxy({}, {
        get: function (_target, prop, _receiver) {
            return prop;
        },
    });
};
Array.prototype.remove = function (o) {
    const index = this.indexOf(o);
    if (index > -1)
        this.splice(index, 1);
    return this;
};
Array.prototype.firstOrDefault = function (defualtValue) {
    return this.length > 0 ? this[0] : defualtValue;
};
Array.prototype.replaceAt = function (index, item) {
    const ret = this.slice(0);
    ret[index] = item;
    return ret;
};
Array.prototype.replaceItem = function (oldItem, newItem) {
    const ret = this.slice(0);
    const index = ret.findIndex(c => c === oldItem);
    ret[index] = newItem;
    return ret;
};
Array.prototype.any = function (expr) {
    return this.findIndex(expr) > -1;
};
Array.prototype.sameOrDefault = function (expr, existingValue, defaultValue) {
    const temp = this.length === 0
        ? defaultValue
        : this.findIndex(p => expr(p) === existingValue) > -1
            ? existingValue
            : expr(this[0]);
    return temp;
};
