declare global {
    export type OmitStrict<T, K extends keyof T> = T extends any ? Pick<T, Exclude<keyof T, K>> : never;
    interface Array<T> {
        remove(o: T): Array<T>;
        firstOrDefault(defualtValue: T): T;
        any(expr: (item: T) => boolean): boolean;
        sameOrDefault<V>(expr: (item: T) => V, value: V, defaultValue: V): V;
        replaceAt(index: number, item: T): Array<T>;
        replaceItem(oldItem: T, newItem: T): Array<T>;
    }
    function fields<T>(): {
        [P in keyof T]: P;
    };
}
export {};
