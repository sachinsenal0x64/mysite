import { Property } from './types';
/**
 * Options for serving static assets.
 */
export interface StaticAssetEntry {
    /**
     * Set to `true` if the file has a hash in its path so that it can be considered unique across deployments.
     */
    permanent?: boolean;
    /**
     * A list of glob patterns that match or omit files to be included.
     */
    glob: string[];
}
/**
 * Options for constructing the serverless bundle.
 */
export interface ServerlessConfig {
    includeNodeModules?: boolean;
    /**
     * A list of glob patterns that match or omit files to be included in the serverless bundle.
     */
    include: string[];
}
/**
 * Options for getting interpolation values that are not supported during local development
 * but are supported in a production.
 */
export interface InterpolationValues {
    is_origin_shield?: string;
    is_subrequest?: string;
    physical_path?: string;
    physical_rel_path?: string;
    physical_doc_root?: string;
    referring_domain?: string;
    virt_dst_country?: string;
    virt_dst_continent?: string;
    virt_dst_asnum?: string;
    virt_dst_port?: string;
    geo_country?: string;
    geo_city?: string;
    geo_latitude?: string;
    geo_longitude?: string;
    geo_postal_code?: string;
    virt_ssl_protocol?: string;
    virt_ssl_cipher?: string;
    virt_ssl_client_ciphers?: string;
    virt_ssl_client_cipher_codes?: string;
    virt_ssl_client_tlsext_ids?: string;
    virt_http_version?: string;
    wurfl_vcap_is_smartphone?: string;
    wurfl_cap_is_tablet?: string;
    wurfl_vcap_is_full_desktop?: string;
    wurfl_vcap_is_ios?: string;
    wurfl_vcap_is_android?: string;
    wurfl_vcap_is_robot?: string;
    wurfl_cap_mobile_browser?: string;
}
/**
 * Custom connector configuration.
 *
 * Note: Edgio supports a number of frameworks out of the box, but
 * as there are many frameworks out there, it is not possible to support them all.
 * For this reason, Edgio provides a way to create a custom connector for your framework.
 * With this configuration you can specify various options for your custom connector.
 */
export interface NodejsConnectorConfig {
    /**
     *  Server build folder location for the underlying framework.
     */
    buildFolder?: string;
    /**
     * Static folder location for the underlying framework.
     */
    staticFolder?: string;
    /**
     * Entry file location for the underlying framework.
     */
    entryFile?: string;
    /**
     * Environment variable name used to set the port for the underlying framework.
     */
    envPort?: string;
    /**
     * Build command to run when building the underlying framework.
     */
    buildCommand?: string;
    /**
     * Dev command to run when running the underlying framework in dev mode.
     */
    devCommand?: string;
    /**
     * Build ready message to look for when building the underlying framework with dev command.
     * Until this message is output by the underlying framework, the build is not considered ready.
     * Otherwise, you can specify a number of seconds to wait until the build is considered ready.
     */
    devReadyMessageOrTimeout?: string | number;
    /**
     * Indicates whether to bundle the entry file or not. If set to false, the entry file will be copied
     * to the serverless folder. Otherwise, the entry file will be bundled and the bundle will be copied
     * to the serverless folder.
     */
    bundleEntryFile?: boolean;
}
export type CloudRuntime = 'nodejs16.x' | 'nodejs18.x';
/**
 * The object exported by edgio.config.js
 */
export default interface Config extends Property {
    /**
     * The path to the Edgio routes file. If omitted the default paths of routes.js, routes.ts,
     * and routes.cjs will be used.
     */
    routes?: string;
    /**
     * The name of the organization in Edgio to which this app should be deployed.
     */
    organization?: string;
    /**
     * The name of the team in Edgio to which this app should be deployed.
     * This was replaced by organization property and will be removed in the future releases.
     * @deprecated Use organization instead.
     */
    team?: string;
    /**
     * Options for serving static assets.
     */
    staticAssets?: StaticAssetEntry[];
    /**
     * Options for constructing the serverless bundle.
     */
    serverless?: ServerlessConfig;
    /**
     * A list of glob patterns identifying which source files should be uploaded when running `edgio deploy --includeSources`.
     * This option is primarily used to share source code with Edgio support personnel for the purpose of debugging.
     * If omitted, `edgio deploy --includeSources` will result in all files which are not gitignored being uploaded to Edgio.
     */
    sources?: string[];
    /**
     * The name of the connector package corresponding to the framework your app uses, or the path to a directory that
     * implements the connector interface.
     */
    connector?: string;
    /**
     * Config overrides to be applied when deploying to specific environments.
     */
    environments?: {
        [name: string]: Property;
    };
    /**
     * Interpolation values that will be used for interpolation that are not supported
     * when testing locally but are available during production.
     *
     *  * **Example**
     *
     *  %{virt_dst_country} is not supported in a local development but is supported in a production
     *  to show this value locally, the following property should be set as following:
     *
     *  interpolationValues.virt_dst_country: 'US'
     *
     */
    interpolationValues?: InterpolationValues;
    /**
     * This option allows to lower the number of concurrently prerendered pages.
     * Use this option to mitigate the load on your APIs at the time of deployment.
     */
    prerenderConcurrency?: number;
    /**
     * If '@edgio/nodejs-connector' is used as the connector, this value will be used to configure it.
     */
    nodejsConnector?: NodejsConnectorConfig;
    /**
     * Sets the Node.js runtime that should be used inside the cloud.
     * By default, local runtime is used, falling back to Node.js 18 if not supported.
     */
    cloudRuntime: CloudRuntime;
    /**
     * This option allows to set the behavior of cache purging each time you deploy.
     */
    purgeCacheOnDeploy?: boolean;
}
/**
 * Returns the contents of edgio.config.js
 * @param reload Set to true to ensure that the config is reloaded from disk
 * @returns
 */
export declare function getConfig(reload?: boolean): Config;
