"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["TRACE"] = 0] = "TRACE";
    LogLevel[LogLevel["DEBUG"] = 1] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
})(LogLevel || (LogLevel = {}));
const key = (_a = process.env.LOG_LEVEL) === null || _a === void 0 ? void 0 : _a.toUpperCase();
const configuredLogLevel = key ? LogLevel[key] : null;
const logger = {
    trace(...params) {
        logger.log(LogLevel.TRACE, ...params);
    },
    debug(...params) {
        logger.log(LogLevel.DEBUG, ...params);
    },
    info(...params) {
        logger.log(LogLevel.INFO, ...params);
    },
    warn(...params) {
        logger.log(LogLevel.WARN, ...params);
    },
    error(...params) {
        logger.log(LogLevel.WARN, ...params);
    },
    log(level, ...params) {
        // If given a single function as a param, call it and log the result
        // This allows us to skip computation of expensive log output if it would
        // not be shown based on the configured level
        if (params.length === 1 && typeof params[0] === 'function') {
            params = [params[0]()];
        }
        if (configuredLogLevel != null && configuredLogLevel <= level) {
            console.log(`${LogLevel[level].padEnd(5, ' ')}`, ...params);
        }
    },
};
exports.default = logger;
