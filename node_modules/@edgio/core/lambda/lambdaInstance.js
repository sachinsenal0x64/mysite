"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaInvocation = void 0;
const uuid = __importStar(require("uuid"));
/**
 * Objects of this class represent a single instantiation of an AWS Lambda function.
 */
class LambdaInstance {
    constructor() {
        this._id = uuid.v4().toString();
        this._spawnedAt = Date.now();
        this._invocationCounter = 0;
        this._lifetimeDuration = 0;
    }
    get id() {
        return this._id;
    }
    get age() {
        return Date.now() - this._spawnedAt;
    }
    get invocationCounter() {
        return this._invocationCounter;
    }
    get lifetimeDuration() {
        return this._lifetimeDuration;
    }
    startInvocation() {
        ++this._invocationCounter;
    }
    stopInvocation(duration) {
        this._lifetimeDuration += duration;
    }
}
exports.default = LambdaInstance;
/**
 * Objects of this class represent a single invocation of an AWS Lambda function.
 */
class LambdaInvocation {
    get lambda() {
        return this._lambda;
    }
    get duration() {
        return this._stopTime - this._startTime;
    }
    constructor(lambda) {
        this._startTime = Date.now();
        this._isRunning = false;
        this._lambda = lambda;
        this._stopTime = this._startTime;
    }
    start() {
        if (!this._isRunning) {
            this._isRunning = true;
            this._lambda.startInvocation();
        }
    }
    stop() {
        if (this._isRunning) {
            this._isRunning = false;
            this._stopTime = Date.now();
            this._lambda.stopInvocation(this.duration);
        }
    }
}
exports.LambdaInvocation = LambdaInvocation;
