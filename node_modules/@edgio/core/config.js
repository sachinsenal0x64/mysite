"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = void 0;
const paths_1 = require("./deploy/paths");
const utils_1 = require("./utils");
const log_1 = __importDefault(require("./log"));
let config;
/**
 * Returns the contents of edgio.config.js
 * @param reload Set to true to ensure that the config is reloaded from disk
 * @returns
 */
function getConfig(reload = false) {
    if (!config || reload) {
        const srcPath = (0, paths_1.getConfigPath)();
        if (reload) {
            delete require.cache[srcPath];
        }
        try {
            // NOTE: We cannot use import here to solve the issue with ESM modules
            // because this function would need to be changed to async.
            // This function is used on several places including the Router methods (onRegister for example) and there is no way to make them async
            // without breaking the method chaining feature or mess up the rules order.
            config = (0, utils_1.nonWebpackRequire)(srcPath);
        }
        catch (e) {
            if (e.code === 'ERR_REQUIRE_ESM') {
                log_1.default.error(`Error: The 'edgio.config.js' file cannot be loaded because it uses CommonJS syntax and this project is set to type 'module'. Please rename it to 'edgio.config.cjs'.`);
                process.exit(1);
            }
            throw e;
        }
        // injected by build-lambda/src/jobs/deployBuild.js
        const environment = process.env.EDGIO_ENVIRONMENT_NAME;
        // apply config overrides for the current environment
        if (environment && config.environments && config.environments[environment]) {
            log_1.default.info(`using config overrides for ${environment}`);
            Object.assign(config, config.environments[environment]);
        }
        // this is backwards compatibility for the old custom connector
        // which is now deprecated, but it was out for a bit so we need to support it
        if (config.nodejsConnector && config.customConnector) {
            config.nodejsConnector = config.customConnector;
        }
    }
    return config;
}
exports.getConfig = getConfig;
