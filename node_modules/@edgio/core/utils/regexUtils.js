"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bindRegexParams = exports.substituteParams = void 0;
/**
 * Performs a substitution of params in destination string.
 * The values are matched and extracted by provided regex from the source string.
 * @param regex
 * @param source
 * @param destination
 * @example substituteParams(/(.+)\/(.+)/, 'something/else', '/path/$1/$2') => '/path/something/else'
 */
function substituteParams(regex, source, destination) {
    return bindRegexParams(destination, regex.exec(source) || []);
}
exports.substituteParams = substituteParams;
/**
 * Performs a substitution of provided params in destination string.
 * Escaped $ symbols are ignored.
 * @param destination
 * @param params
 */
function bindRegexParams(destination, params) {
    // Find all substitution symbols in destination and replace them with extracted values
    // or empty string when the value does not exist.
    var _a;
    return (((_a = destination.match(/(\\?)(\$[0-9]*)/g)) === null || _a === void 0 ? void 0 : _a.reduce((output, substitutionParam) => {
        // Ignore escaped $ symbols
        if (substitutionParam.startsWith('\\'))
            return output;
        const index = parseInt(substitutionParam.substring(1)); // get index from $1, $2, etc.
        return output.replace(substitutionParam, params[index] || '');
    }, destination)) || destination);
}
exports.bindRegexParams = bindRegexParams;
