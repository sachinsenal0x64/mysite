"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Unlike decodeURIComponent or decodeURI, this function only decodes
 * defined non-special characters in compliant with RFC 3986 URI normalization.
 *
 * Learn more: https://www.ietf.org/rfc/rfc3986.txt
 * Snippet: For consistency, percent-encoded octets in the ranges of ALPHA
 *    (%41-%5A and %61-%7A), DIGIT (%30-%39), hyphen (%2D), period (%2E),
 *    underscore (%5F), or tilde (%7E) should not be created by URI
 *    producers and, when found in a URI, should be decoded to their
 *    corresponding unreserved characters by URI normalizers.
 *
 * @param input
 * @returns
 */
function decodeUnreservedURIChars(input) {
    const symbols = [...'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~'];
    // This array contains encoded symbols in the same order as symbols array.
    // It's precalculated for performance reason, and it can be generated by the following code:
    // const symbolsEncoded = symbols.map(symbol => `%${symbol.charCodeAt(0).toString(16).toUpperCase()}`)
    // prettier-ignore
    const symbolsEncoded = [
        '%61', '%62', '%63', '%64', '%65', '%66',
        '%67', '%68', '%69', '%6A', '%6B', '%6C',
        '%6D', '%6E', '%6F', '%70', '%71', '%72',
        '%73', '%74', '%75', '%76', '%77', '%78',
        '%79', '%7A', '%41', '%42', '%43', '%44',
        '%45', '%46', '%47', '%48', '%49', '%4A',
        '%4B', '%4C', '%4D', '%4E', '%4F', '%50',
        '%51', '%52', '%53', '%54', '%55', '%56',
        '%57', '%58', '%59', '%5A', '%30', '%31',
        '%32', '%33', '%34', '%35', '%36', '%37',
        '%38', '%39', '%2D', '%2E', '%5F', '%7E'
    ];
    return symbolsEncoded.reduce((output, symbolEncoded, index) => output.replace(symbolEncoded, symbols[index]), input);
}
exports.default = decodeUnreservedURIChars;
