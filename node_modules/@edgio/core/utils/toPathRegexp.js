"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_to_regexp_1 = require("path-to-regexp");
const InvalidRoutePatternError_1 = __importDefault(require("../errors/InvalidRoutePatternError"));
/**
 * Converts an express-style path string with optional variables to a RegExp instance.
 * @param path
 * @returns
 */
function toPathRegexp(path) {
    /* istanbul ignore else */
    if (path) {
        try {
            return (0, path_to_regexp_1.pathToRegexp)(path);
        }
        catch (e) {
            throw new InvalidRoutePatternError_1.default(path);
        }
    }
    else {
        // For fallbacks we want everything matched so that we can replace everything if needed.
        // We insist on total matching with `^` and `$` because some regex replacement algorithms
        // have issues with correctly applying `.*` in completely greedy manner (e.g. Fastly's `regsuball`)
        return /^.*$/;
    }
}
exports.default = toPathRegexp;
