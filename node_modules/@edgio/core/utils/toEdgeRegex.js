"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromEdgeRegex = void 0;
const regExpEscape_1 = __importDefault(require("./regExpEscape"));
/**
 * Converts a JavaScript Regexp instance to a string compatible with edge.
 * See https://docs.fastly.com/en/guides/vcl-regular-expression-cheat-sheet
 *
 * By default, the slashes arent escaped. For usage with interpolation, please set escapeSlashes param to true.
 * @param regex
 * @param prefix
 * @param escapeSlashes
 */
function toEdgeRegex(regex, prefix = '', escapeSlashes) {
    // Forward slashes dont need to be escaped according to docs.
    // We still allow for escaping them for edge cases, where naked '/' is a control character (interpolation)
    let source = escapeSlashes ? regex.source : regex.source.replace(/\\\//g, '/');
    if (source.startsWith('^')) {
        source = `^${(0, regExpEscape_1.default)(prefix)}${source.slice(1)}`;
    }
    else {
        source = `${(0, regExpEscape_1.default)(prefix)}${source}`;
    }
    return `${regex.ignoreCase ? '(?i)' : ''}${source}`;
}
exports.default = toEdgeRegex;
/**
 * Reverse transformation. Mostly used for unit tests.
 * @param edgeRegex
 */
function fromEdgeRegex(edgeRegex) {
    const ignoreCase = edgeRegex.indexOf('(?i)') === 0;
    if (ignoreCase) {
        edgeRegex = edgeRegex.slice('(?i)'.length);
    }
    return new RegExp(edgeRegex.replace(/\//g, '/'), ignoreCase ? 'i' : '');
}
exports.fromEdgeRegex = fromEdgeRegex;
