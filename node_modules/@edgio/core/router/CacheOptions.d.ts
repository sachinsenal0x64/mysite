import { TimeInterval } from '../types';
import CustomCacheKey from './CustomCacheKey';
/**
 * Options for controlling caching behavior in the browser and at the network edge.
 */
export interface CacheOptions {
    /**
     * Sets the caching behavior at edge. When set to `false` the caching in the edge is turned
     * off. This also turns off queueing of potentially cacheable requests that platform performs
     * automatically.
     *
     * Note: if know for sure that a specific `GET` route will never cache then you should
     * always set `edge` caching to `false` for it as it will disable `GET` request coalescing
     * making your application faster.
     */
    edge?: EdgeCacheOptions | false;
    /**
     * Sets the caching behavior in the browser. When set to `false` the caching in the browser
     * is turned off.
     */
    browser?: BrowserCacheOptions | false;
    /**
     * Allows you to split or normalize the cache space for a given route. Common use cases include:
     *
     * - serving multiple variants of the same URL based on a currency and/or language cookie.
     * - caching different responses based on device type
     * - ignoring all but a specific set of query parameters when looking up a response from the cache.
     *
     * **Example**
     *
     * ```js
     *  import { Router, CustomCacheKey } from '@edgio/core/router'
     *
     *  new Router()
     *    .match('/some-path', ({ cache }) => {
     *      cache({
     *        key: new CustomCacheKey()
     *          .excludeAllQueryParametersExcept('color', 'size')
     *          .addCookie('currency')
     *          .addCookie('location', cookie => {
     *            cookie.group('na').byPattern('us|ca')
     *            cookie.group('eur').byPattern('de|fr|ee')
     *          }),
     *        edge: {
     *          maxAgeSeconds: 60 * 60
     *        }
     *      })
     *    })
     * ```
     */
    key?: CustomCacheKey;
    /**
     * List of status code which are eligible for caching. Status code 200 is always
     * cached and can't be changed.
     */
    cacheableStatusCodes?: Array<number>;
    /**
     * Enables caching for POST and PUT. GET is always cached.
     */
    enableCachingMethods?: ('POST' | 'PUT')[];
}
/**
 * Options for controlling caching behavior at edge
 */
export interface EdgeCacheOptions {
    /**
     * The maximum number of seconds (or Saifish time interval) that a response is served
     * from the cache until it is considered stale. Unless `staleWhileRevalidate` is specified,
     * stale responses will not be returned to the browser.
     */
    maxAgeSeconds?: number | TimeInterval;
    /**
     * Extends the duration that a response will be served from the cache after it has become stale.
     * When using staleWhileRevalidate, if Edgio receives a request for a stale asset, the cached
     * response will be served and a fresh response will be concurrently fetch so that it can be served
     * for future requests. The stale response will continue to be served until the fresh fetched.
     */
    staleWhileRevalidateSeconds?: number | TimeInterval;
    /**
     * Allows you to force caching of responses marked as `private` in their `cache-control` header.
     * This option must be used with utmost care to avoid leaking private information.
     *
     * **Example**
     *
     * ```js
     *  import { Router, CustomCacheKey } from '@edgio/core/router'
     *
     *  new Router()
     *    .match('/private/path', ({ cache }) => {
     *      cache({
     *        edge: {
     *          maxAgeSeconds: 60 * 60,
     *          key: new CustomCacheKey()
     *            .addCookie('session'),
     *          forcePrivateCaching: true,
     *        }
     *      })
     *    })
     * ```
     */
    forcePrivateCaching?: boolean;
}
/**
 * Options for controlling caching behavior in the browser
 */
export interface BrowserCacheOptions {
    /**
     * Sets the `max-age` value of the `cache-control` header sent to the browser.  This controls the duration
     * that the response is held in the browser's http cache.
     */
    maxAgeSeconds?: number | TimeInterval;
    /**
     * Sends an `x-sw-cache-control` header with a value of `max-age={serviceWorkerSeconds}`.  This is not a standard
     * header that service workers understand by default.  You'll need to implement logic to handle this in your service worker.
     */
    serviceWorkerSeconds?: number | TimeInterval;
}
