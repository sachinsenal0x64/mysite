import { Features, Rules, RulesVariables } from '../types';
export type OptionalNotValue<TValue extends string> = {
    isNot?: boolean;
    value: TValue;
};
/**
 * This class represents the CacheManifest structure,
 * and provides helper methods.
 * @private
 */
export declare class CacheManifest {
    /**
     * The array of edge-control rules.
     */
    rules: Rules[];
    /**
     * Creates new instance from the object.
     */
    static from(obj: {
        rules: Rules[];
    }): CacheManifest & {
        rules: Rules[];
    };
    /**
     * Returns true if provided URL should be prefetched.
     */
    shouldPrefetch(url: URL): boolean;
    /**
     * Returns the callback function which provides
     * the values for the rule conditions in browser environment.
     * We can match only against the values we can extract from the URL.
     */
    getEvalVariableCallback(url: URL): (variable: RulesVariables) => string | undefined;
    /**
     * Returns true if provided Features allow to cache the URL.
     */
    isCacheable(features: Features): boolean;
    /**
     * Returns the content of /__edgio__/cache-manifest.js
     * with serialized CacheManifest.
     */
    serialize(): string;
}
