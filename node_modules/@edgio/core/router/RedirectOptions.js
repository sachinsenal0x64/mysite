"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeRedirectOptions = void 0;
const url_1 = __importDefault(require("url"));
const querystring_1 = __importDefault(require("querystring"));
/**
 * Translates redirect params into normalized version that solves backward compatibility
 * issues and also takes into account query parameters that may be included in the query
 * string itself.
 *
 * @param to string to where we are redirecting the request; may have query string
 * @param options options with which we are redirecting the request
 */
const normalizeRedirectOptions = (to, options) => {
    const { statusCode = 302, query = {} } = 
    // Retro-compatibility, second argument used to be statusCode
    typeof options === 'number' ? { statusCode: options } : options;
    // Parse `to` param to extract query strings from it.
    let toQuery = {};
    const parsedTo = url_1.default.parse(to);
    // istanbul ignore next - ?. gives istanbul indigestion
    if (parsedTo === null || parsedTo === void 0 ? void 0 : parsedTo.search) {
        to = to.substr(0, to.length - parsedTo.search.length);
        // @ts-ignore: whenever search is truthy query is at least an empty string
        toQuery = querystring_1.default.parse(parsedTo.query);
    }
    return {
        to,
        statusCode: statusCode,
        query: {
            ...toQuery,
            ...query,
        },
    };
};
exports.normalizeRedirectOptions = normalizeRedirectOptions;
