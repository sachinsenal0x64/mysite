"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const environment_1 = require("../environment");
const constants_1 = require("../constants");
const RouteCriteria_1 = require("./RouteCriteria");
const CacheManifest_1 = require("./CacheManifest");
const origins_1 = require("../origins");
function addBuiltInRoutes(router) {
    try {
        // Add @edgio/devtools built-in routes if the module is installed
        require('@edgio/devtools/addBuiltInRoutes')({
            router,
            local: (0, environment_1.isLocal)(),
        });
    }
    catch (e) {
        // istanbul ignore if
        // @ts-ignore
        if (e.code !== 'MODULE_NOT_FOUND') {
            throw e;
        }
    }
    if (!router.routerOptions.indexPermalink) {
        /**
         * Disables crawling of permalinks by setting the `x-robots-tag: noindex` response header
         * for hosts matching edgio.link or edgio-perma.link.
         */
        router.match({
            headers: {
                host: constants_1.HOSTS_NOINDEX_PERMALINK_REGEX,
            },
        }, {
            headers: {
                add_response_headers: {
                    'x-robots-tag': 'nofollow, noindex',
                },
            },
        });
    }
    if ((0, environment_1.isLocal)()) {
        /**
         * Rule for /__edgio__/cache-manifest.js.
         *
         * When we're running locally, we just simulate the cache-manifest file.
         * We don't need to do anything special for it. We can just expose all rules as its content.
         *
         * When site is deployed, the cache-manifest is generated by console-api and served by built-in rule.
         * It contains only rules with allowed features and conditions. All other features are removed.
         *
         * NOTE: We'll not add this rule when running on permalinks to not expose any sensitive information of our customers.
         * Cache-manifest will not work on permalinks until they will be moved behind the Edge.
         * @example Content of cache-manifest.js:
         * self.__EDGIO_CACHE_MANIFEST__={
         *     "rules": [
         *         {
         *             "caching": {
         *                 "max_age" : {
         *                     "200":"1y"
         *                 }
         *             }
         *         }
         *     ]
         * }
         */
        router.match(constants_1.EDGIO_CACHE_MANIFEST_PATH, ({ compute }) => {
            compute(async (req, res) => {
                const cacheManifest = CacheManifest_1.CacheManifest.from({
                    rules: router.rules,
                });
                res.body = cacheManifest.serialize();
                res.setHeader('content-type', 'application/javascript');
            });
        });
    }
    if ((0, environment_1.isLocal)()) {
        /**
         * Rule for /__edgio__/prefetch/:path* and /__edgio__service_worker_:version.js paths
         *
         * This rule is used to simulate @edgio/prefetch from CDN in local environment,
         * so the <script src="/__edgio__/prefetch/install.js"></script> will work same as deployed.
         */
        router.if((0, RouteCriteria_1.or)({
            path: constants_1.EDGIO_PREFETCH_CDN_PATH,
        }, {
            path: constants_1.EDGIO_PREFETCH_CDN_SW_PATH,
        }), ({ proxy, cache }) => {
            proxy(origins_1.PREFETCH_ORIGIN_NAME);
            cache({
                edge: {
                    maxAgeSeconds: 60 * 60,
                },
            });
        });
    }
}
exports.default = addBuiltInRoutes;
