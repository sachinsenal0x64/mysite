"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RouteCriteria_1 = require("./RouteCriteria");
const path_to_regexp_1 = require("path-to-regexp");
const universalRouteUtils_1 = require("../utils/universalRouteUtils");
class ParamsExtractor {
    constructor(routeCriteria) {
        this.routeCriteria = {};
        this.updateRouteCriteria(routeCriteria);
    }
    updateRouteCriteria(routeCriteria) {
        this.routeCriteria = {
            path: routeCriteria === null || routeCriteria === void 0 ? void 0 : routeCriteria.path,
            query: routeCriteria === null || routeCriteria === void 0 ? void 0 : routeCriteria.query,
        };
    }
    /**
     * Returns the object with extracted params from request path and query matched by latest routeCriteria
     * @returns
     */
    extract(request) {
        var _a, _b;
        return {
            ...(((_a = this.routeCriteria) === null || _a === void 0 ? void 0 : _a.path) && !(0, RouteCriteria_1.isNegation)(this.routeCriteria.path)
                ? ParamsExtractor.getMatchedPathParams(this.routeCriteria.path, request.path)
                : {}),
            ...(((_b = this.routeCriteria) === null || _b === void 0 ? void 0 : _b.query)
                ? ParamsExtractor.getMatchedQueryParams(this.routeCriteria.query, request.query)
                : {}),
        };
    }
    /**
     * Returns params from request path matched by route criteria path
     * @param criteriaPath
     * @param requestPath
     * @returns
     */
    static getMatchedPathParams(criteriaPath, requestPath) {
        // When criteriaPath is a RegExp, we extract matched groups from requestPath
        // and expose them in params object under "$" key.
        // Example: $1 => req.params.$[1]
        if (criteriaPath instanceof RegExp)
            return {
                $: criteriaPath.exec(requestPath) || [],
            };
        if (Array.isArray(criteriaPath))
            return undefined;
        const pathMatcher = (0, path_to_regexp_1.match)(criteriaPath.toString(), { decode: decodeURIComponent });
        const result = pathMatcher(requestPath);
        return result ? result.params : undefined;
    }
    /**
     * Returns params from request query matched by route criteria query
     * @param criteriaQuery object of routeCriteria queries
     * @param requestQuery object of parsed queries
     * @returns
     */
    static getMatchedQueryParams(criteriaQuery, requestQuery) {
        let extractedParams = {};
        if (typeof requestQuery !== 'object')
            return extractedParams;
        for (const criteriaQueryKey in criteriaQuery) {
            const criteriaQueryValue = criteriaQuery[criteriaQueryKey];
            if (typeof criteriaQueryValue !== 'string' || !(0, universalRouteUtils_1.isParamMatcher)(criteriaQueryValue))
                continue;
            const paramName = (0, universalRouteUtils_1.paramMatcherToParam)(criteriaQueryValue);
            extractedParams = {
                ...extractedParams,
                [paramName]: requestQuery[paramName],
            };
        }
        return extractedParams;
    }
}
exports.default = ParamsExtractor;
