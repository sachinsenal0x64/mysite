"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const path_1 = require("./path");
const origins_1 = require("../origins");
const RouteCriteria_1 = require("./RouteCriteria");
const constants_2 = require("../constants");
const RedirectOptions_1 = require("./RedirectOptions");
const OriginFetcher_1 = __importDefault(require("../runtime/OriginFetcher"));
const isEmpty_1 = __importDefault(require("../utils/isEmpty"));
const bindParams_1 = __importDefault(require("../utils/bindParams"));
const ParamsExtractor_1 = __importDefault(require("./ParamsExtractor"));
const qs_1 = __importDefault(require("qs"));
const toEdgeRegex_1 = __importDefault(require("../utils/toEdgeRegex"));
const cookieUtils_1 = require("../utils/cookieUtils");
const exact_1 = require("../router/exact");
const toTimeInterval_1 = require("./converters/toTimeInterval");
/**
 * RouteHelper makes it easy to implement common request handling patterns and provides backwards compatibility with Layer0's
 * [ResponseWriter](https://docs.layer0.co/docs/api/core/classes/_router_responsewriter_.responsewriter.html) class.
 * Please pay attention to the following notes when using RouteHelper to avoid unexpected behavior.
 *
 * **Retrieving the RouteHelper instance**
 *
 * When a function is passed to the second argument of a rule, that function is provided with an instance of RouteHelper as the sole argument.
 *
 * Example:
 *
 * ```js
 *  import { Router } from '@edgio/core/router'
 *
 *  export default new Router()
 *    .get('/favicon.ico', ({ serveStatic }) => { // the parameter provided here is an instance of RouteHelper
 *      serveStatic('images/favicon.ico')
 *    })
 * ```
 *
 * **Overriding methods**
 *
 * The below RouteHelper methods are partially or fully overriding each other and should not be used together in the same rule.
 * Only the method in the last matched rule will be performed.
 * ```js
 *  RouteHelper.proxy
 *  RouteHelper.compute
 *  RouteHelper.renderWithApp
 *  RouteHelper.serveStatic
 *  RouteHelper.redirect
 *  RouteHelper.setOrigin
 *  RouteHelper.appShell
 *  RouteHelper.send
 *  RouteHelper.setResponseBody
 *  RouteHelper.serviceWorker
 * ```
 *
 * Example:
 *
 * ```js
 *  import { Router } from '@edgio/core/router'
 *
 *  export default new Router()
 *    // This compute() will be executed on all paths except the '/page'.
 *    .get('/:path*', ({ compute }) => {
 *      compute(async (req, res) => {
 *        res.setHeader('content-type', 'text/html')
 *        res.body = '<html><body>Hello World</body></html>'
 *      })
 *    })
 *    // On a '/page' path, the proxy() call will override the compute() above, and just the proxy will be executed.
 *   .get('/page', ({ proxy }) => {
 *      proxy("origin")
 *    })
 * ```
 *
 * **Incorrect usage of methods**
 *
 * All RouteHelper methods are independent by design and cannot be nested or called from each other.
 *
 * Example of incorrect usage:
 *
 * ```js
 *  import { Router } from '@edgio/core/router'
 *
 *  export default new Router()
 *    // This rule will not work!
 *    .get('/page1', ({ compute, cache }) => {
 *      compute(async (req, res) => {
 *        res.body = '<html><body>Hello World</body></html>'
 *        cache({
 *          edge: {
 *            maxAgeSeconds: 60 * 60 * 24,
 *          }
 *        })
 *      })
 *    })
 *    // This rule will work
 *    .get('/page2', ({ compute, cache }) => {
 *      compute(async (req, res) => {
 *        res.body = '<html><body>Hello World</body></html>'
 *      })
 *      cache({
 *          edge: {
 *            maxAgeSeconds: 60 * 60 * 24,
 *          }
 *      })
 *    })
 * ```
 */
class RouteHelper {
    /**
     * @private
     * @param criteria
     * @param router
     */
    constructor(criteria, router) {
        this.features = {};
        /**
         * Adds features to the route using features json object. This can be used to combine
         * functional style route setting with object style route setting.
         *
         * This RouteHelper method should be called as first RouteHelper method in the same rule
         * to ensure that other methods such as serveStatic are not partially overridden by specified features.
         *
         * **Example**
         *
         * ```js
         *  import { Router } from '@edgio/core/router'
         *
         *  export default new Router()
         *    .get('/images/:files*', ({ addFeatures, serveStatic }) => {
         *      addFeatures({
         *        response: {
         *          optimize_images: true,
         *        }
         *      })
         *      serveStatic('images/:files*')
         *    })
         * ```
         */
        this.addFeatures = (features) => {
            this.features = { ...this.features, ...features };
        };
        /**
         * Serves a service worker with proper edge and browser cache headers.
         * @param filePath The path to the service worker relative to the root directory of your app
         *
         * **Example**
         *
         * ```js
         *  import { Router } from '@edgio/core/router'
         *
         *  export default new Router()
         *    .get('/service-worker.js', ({ serviceWorker }) => {
         *      serviceWorker('dist/service-worker.js')
         *    })
         * ```
         */
        this.serviceWorker = (filePath) => {
            this.cache({ edge: { maxAgeSeconds: constants_1.FAR_FUTURE_TTL }, browser: false });
            if (filePath) {
                this.serveStatic(filePath);
            }
            else {
                this.setOrigin(origins_1.STATIC_ORIGIN_NAME);
                this.rewritePath(undefined, `${(0, origins_1.getPathPrefix)(origins_1.STATIC_ORIGIN_NAME)}/service-worker.js`);
            }
        };
        /**
         * Sets the caching behavior for both browser and edge.
         * The `cache()` method can be called in the same rule where the `proxy()` is called or in any other rule that matches the same path.
         *
         * **Example**
         *
         * ```
         *  import { Router } from '@edgio/core/router'
         *
         *  export default new Router()
         *    .get('/p/:productId', ({ cache, proxy }) => {
         *      cache({
         *        browser: {
         *          maxAgeSeconds: 0,
         *          serviceWorkerSeconds: 60 * 60, // 1 hour
         *        },
         *        edge: {
         *          maxAgeSeconds: 60 * 60 * 24, // 24 hours
         *          staleWhileRevalidateSeconds: 60 * 60 // 1 hour
         *        }
         *      })
         *      proxy('origin')
         *    })
         * ```
         */
        this.cache = (options) => {
            this.features.caching = this.features.caching || {};
            const { caching } = this.features;
            if (options.edge) {
                if (options.edge.maxAgeSeconds) {
                    caching.max_age = (0, toTimeInterval_1.toTimeInterval)(options.edge.maxAgeSeconds);
                }
                if (options.edge.staleWhileRevalidateSeconds) {
                    caching.stale_while_revalidate = (0, toTimeInterval_1.toTimeInterval)(options.edge.staleWhileRevalidateSeconds);
                }
                if (options.edge.forcePrivateCaching) {
                    caching.ignore_origin_no_cache = [200];
                }
            }
            else if (options.edge === false) {
                caching.bypass_cache = true;
            }
            if (options && options.cacheableStatusCodes) {
                caching.cacheable_status_codes = options.cacheableStatusCodes;
            }
            if (options && options.enableCachingMethods) {
                caching.enable_caching_for_methods = options.enableCachingMethods;
            }
            if (options.browser) {
                if (options.browser.serviceWorkerSeconds == null && options.browser.maxAgeSeconds == null) {
                    throw new Error('The browser cache setting should specify serviceWorkerSeconds or maxAgeSeconds.');
                }
                if (options.browser.serviceWorkerSeconds) {
                    caching.service_worker_max_age = (0, toTimeInterval_1.toTimeInterval)(options.browser.serviceWorkerSeconds);
                }
                if (options.browser.maxAgeSeconds === 0) {
                    caching.bypass_client_cache = true;
                }
                else if (options.browser.maxAgeSeconds) {
                    caching.client_max_age = (0, toTimeInterval_1.toTimeInterval)(options.browser.maxAgeSeconds);
                }
            }
            else if (options.browser === false) {
                caching.bypass_client_cache = true;
            }
            if (options.key) {
                options.key.applyCaching(this.features);
            }
        };
        /**
         * Responds with a static asset from the specified path.
         *
         * **Example**
         *
         * ```js
         * serveStatic('path/to/asset/from/app/root')
         * ```
         *
         * You can also use variables in the asset path.  For example, to return files under the `assets` directory
         * when the url starts with `/static`:
         *
         * ```
         *  new Router()
         *    .get('/static/:path*', ({ serveStatic }) => {
         *      serveStatic('assets/:path*')
         *    })
         * ```
         *
         * The substitution group params can be used in the asset path when path criteria is Regular Expression.
         * The same functionality can be achieved using the code below.
         *
         * ```
         *  new Router()
         *    .get(/\/static\/(.*)/, ({ serveStatic }) => {
         *      serveStatic('assets/$1')
         *    })
         * ```
         * @param path The relative path to the asset from the app's root directory. You can reference path variables using `:variable`.
         * @param options The different options to serving static assets
         */
        this.serveStatic = (path, options = {}) => {
            var _a, _b, _c;
            const { edgeMaxAgeSeconds = constants_1.FAR_FUTURE_TTL, permanent } = options;
            this.cache({ edge: { maxAgeSeconds: edgeMaxAgeSeconds } });
            const origin = permanent ? origins_1.PERMANENT_STATIC_ORIGIN_NAME : origins_1.STATIC_ORIGIN_NAME;
            this.setOrigin(origin);
            const pathPrefix = (0, origins_1.getPathPrefix)(origin);
            path = path.startsWith('/') ? path.slice(1) : path;
            // In case the route criteria path is array (IN operator) or negation,
            // we can't use it as a source for rewritePath
            const sourceFromCriteria = (0, RouteCriteria_1.isNegation)((_a = this.routeCriteria) === null || _a === void 0 ? void 0 : _a.path) || Array.isArray((_b = this.routeCriteria) === null || _b === void 0 ? void 0 : _b.path)
                ? undefined
                : (_c = this.routeCriteria) === null || _c === void 0 ? void 0 : _c.path;
            // We will always try to use rewrite source from options first, then from criteria and then default to '/:path*'
            const source = (options === null || options === void 0 ? void 0 : options.rewritePathSource) || sourceFromCriteria || '/:path*';
            if (options.statusCode) {
                this.setResponseCode(options.statusCode);
            }
            // TODO remove this once edge control supports path_prefix in origins.hosts
            this.rewritePath(source, `${pathPrefix}/${path}`, {
                // We need to remove trailing slash from the path here,
                // so that both '/posts/' and '/posts' match the same '/posts/index.html' file alias on S3.
                skipSlash: true,
                // Query search params need to be preserved in the rewrite destination,
                // so the Sailfish image optimizer params work with images on S3.
                skipQuery: false,
            });
        };
        /**
         * Renders a result in Edgio's serverless cloud using your application. Use this method
         * to respond with an SSR or API result from your application.
         * This method will only work with applications that has serverless backend such as Next.js, Nuxt.js, Express etc...
         */
        this.renderWithApp = () => {
            this.sendToServerless(constants_1.EDGIO_CLOUD_FUNCTIONS_HINTS.app);
        };
        /**
         * Registers a new Edgio Cloud Function.
         * The provided callback function is executed in Edgio's serverless cloud.
         * The callback is passed the request and the response
         *
         * Use this method when you need to compute a response in the cloud rather than at the edge or at build time. A common example
         * is when the response must be computed based on request parameters, headers, or cookies.
         *
         * A common example is to look up the destination for a redirect from an external API:
         *
         * ```js
         *  new Router()
         *    .get('/products/:id', ({ redirect, compute }) => {
         *      compute(async (request, response) => {
         *        const destination = await getDestinationFromAPI(request.params.id)
         *        response.statusCode = 302
         *        response.setHeader("Location", destination)
         *      })
         *    })
         * ```
         *
         * This method can be combined with `cache` to compute complex responses in the cloud and cache them at edge:
         *
         * ```js
         *  new Router()
         *    .get('/products/:id', ({ cache, compute }) => {
         *      cache({
         *        edge: {
         *          maxAgeSeconds: 60 * 60 * 24,
         *        }
         *      })
         *      compute(async (request, response) => {
         *        const product = await getProductFromAPI(request.params.id)
         *        response.setHeader("content-type", "application/json")
         *        response.body = JSON.stringify({
         *          success: true,
         *          product,
         *        })
         *      })
         *    })
         * ```
         * Note: Extracted params from express-style criteria are available as object under req.params.
         * When regular expression is used as path criteria, the matched group params are available as array under req.params.$.
         * Example: $1 => req.params.$[1]
         *
         * @param fn A function to run in the cloud to compute the response
         */
        this.compute = (fn) => {
            this.sendToServerless(constants_1.EDGIO_CLOUD_FUNCTIONS_HINTS.compute, fn);
        };
        /**
         * Relays the request to the specified origin.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path/with/:variable', ({ proxy }) => {
         *      proxy('legacy', { path: '/some/other/path/with/:variable' })
         *    })
         * ```
         *
         * In this example, we relay the request to the "legacy" origin. In this case, `edgio.config.js` must
         * contain a definition for the `legacy` origin.  For example:
         *
         * ```
         *  // edgio.config.js
         *
         *  module.exports = {
         *    routes: "./routes.js",
         *    ...
         *    origins: [
         *       {
         *         name: 'legacy',
         *         balancer: 'round_robin',
         *         hosts: [{ location: 'legacy.domain.com' }],
         *       },
         *     ],
         *  }
         * ```
         *
         * NOTE: The proxy is executed at the edge unless the `transformRequest` or `transformResponse` options are provided.
         * In that case, the proxy is executed using Edgio Cloud Functions.
         *
         * @param backend The name of one of the origins in your `edgio.config.js` file.
         * @param options
         */
        this.proxy = (backend, options) => {
            this.setOrigin(backend);
            if ((options === null || options === void 0 ? void 0 : options.transformRequest) || (options === null || options === void 0 ? void 0 : options.transformResponse)) {
                // if either transformRequest or transformResponse are provided, we need to use serverless
                // since sailfish does not support these options
                this.sendToServerless(constants_1.EDGIO_CLOUD_FUNCTIONS_HINTS.proxy, async (req, res, propertyContext) => {
                    // we know that lambdaresponse is used internally, just not exposed in compute api for users
                    const lambdaResponse = res;
                    (options === null || options === void 0 ? void 0 : options.transformRequest) && options.transformRequest(req);
                    // TODO: if we dont tranform response, we COULD stream the body chunk by chunk, but we dont have
                    // an access to requestcontext here so its moreso an idea for the future, as its an edge case
                    // if (!options?.transformResponse) {
                    //   lambdaResponse.setOnWrite(async () => await this.context.executeStreamResponse())
                    // }
                    await new OriginFetcher_1.default(propertyContext).fetch(req, res, {
                        headers: options === null || options === void 0 ? void 0 : options.headers,
                        removeEmptySearchParamValues: options === null || options === void 0 ? void 0 : options.removeEmptySearchParamValues,
                        path: options === null || options === void 0 ? void 0 : options.path,
                    }, backend);
                    // we create body from received chunks, so users can further transform it in transformResponse
                    // the ending chunk is always null, therefore we omit it, otherwise the buffer wont be able to concat
                    lambdaResponse.body = Buffer.concat(lambdaResponse.chunks.slice(0, -1));
                    // if we dont transform response, the chunks are already in proper format at this time
                    if (options === null || options === void 0 ? void 0 : options.transformResponse) {
                        options.transformResponse(res, req);
                        res.setHeader('Content-Length', lambdaResponse.body.length.toString());
                    }
                });
            }
            else if (options) {
                // otherwise we can transform the request at the edge using features
                if (options.path) {
                    const destination = typeof options.path === 'string' ? options.path : options.path();
                    // If path is an array (InOperatorValues), we use match all as a path
                    // as we cannot know which path will be used, so whatever is matched pass it to the origin
                    // otherwise if it is.
                    // Matching against negation doesnt make sense.
                    const path = Array.isArray(this.routeCriteria.path) || (0, RouteCriteria_1.isNegation)(this.routeCriteria.path)
                        ? '/:path*'
                        : this.routeCriteria.path;
                    if (destination) {
                        this.rewritePath(path, destination);
                    }
                }
                if (options === null || options === void 0 ? void 0 : options.headers) {
                    for (const [key, value] of Object.entries(options.headers)) {
                        this.setRequestHeader(key, value);
                    }
                }
                if ((options === null || options === void 0 ? void 0 : options.followRedirects) != null) {
                    if (!this.features.url)
                        this.features.url = {};
                    this.features.url.follow_redirects = options === null || options === void 0 ? void 0 : options.followRedirects;
                }
            }
        };
        /**
         * Adds or replaces existing response header
         * immediately before delivering the response downstream.
         * New value can be appended to the end of existing value by prepending a `+` symbol to the header name.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ setResponseHeader, proxy }) => {
         *      proxy('origin')
         *      setResponseHeader('new-header', 'some-value')
         *      setResponseHeader('+existing-header', 'other-value')
         *    })
         * ```
         *
         * @param name The case-insensitive name of the response header
         * @param value The value to set
         */
        this.setResponseHeader = (name, value) => {
            /* istanbul ignore else */
            if (!this.features.headers) {
                this.features.headers = {};
            }
            /* istanbul ignore else */
            if (!this.features.headers.set_response_headers) {
                this.features.headers.set_response_headers = {};
            }
            const headers = this.features.headers.set_response_headers;
            headers[name] = value;
        };
        /**
         * Adds new response header without replacing existing headers with the same name
         * before delivering the response downstream.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ addResponseHeader, proxy }) => {
         *      proxy('origin')
         *      addResponseHeader('some-header', 'some-value')
         *    })
         * ```
         *
         * @param name The case-insensitive name of the response header
         * @param value The value to set
         */
        this.addResponseHeader = (name, value) => {
            /* istanbul ignore else */
            if (!this.features.headers) {
                this.features.headers = {};
            }
            /* istanbul ignore else */
            if (!this.features.headers.add_response_headers) {
                this.features.headers.add_response_headers = {};
            }
            const headers = this.features.headers.add_response_headers;
            headers[name] = value;
        };
        /**
         * Alters a response header immediately before delivering the response downstream.
         * Use this method to derive the new header value from the existing one.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ updateResponseHeader, proxy }) => {
         *      proxy('origin')
         *      updateResponseHeader('some-header', /some-.*-part/gi, 'some-replacement')
         *    })
         * ```
         *
         * @param name The case-insensitive name of the response header
         * @param match Regex to find the part that should be replaced.
         * @param replace Value that will replace the matched part.
         */
        this.updateResponseHeader = (name, match, replace) => {
            // Creates Find And Replace interpolation expression from the given regex and replacement string
            this.setResponseHeader(name, `%{resp_${name}/${match.global ? '/' : ''}${(0, toEdgeRegex_1.default)(match, '', true)}/${replace}}`);
        };
        /**
         * Removes a response header immediately before delivering the response downstream.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ removeResponseHeader, proxy }) => {
         *      proxy('origin')
         *      removeResponseHeader('some-header')
         *    })
         * ```
         * @param name The case-insensitive name of the response header
         */
        this.removeResponseHeader = (name) => {
            /* istanbul ignore else */
            if (!this.features.headers) {
                this.features.headers = {};
            }
            if (!this.features.headers.remove_response_headers) {
                this.features.headers.remove_response_headers = [];
            }
            this.features.headers.remove_response_headers.push(name);
        };
        /**
         * Removes a header from the response provided by an origin server.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ removeUpstreamResponseHeader, proxy }) => {
         *      proxy('origin')
         *      removeUpstreamResponseHeader('some-header')
         *    })
         * ```
         * @param name The case-insensitive name of the response header
         */
        this.removeUpstreamResponseHeader = (name) => {
            /* istanbul ignore else */
            if (!this.features.headers) {
                this.features.headers = {};
            }
            if (!this.features.headers.remove_origin_response_headers) {
                this.features.headers.remove_origin_response_headers = [];
            }
            this.features.headers.remove_origin_response_headers.push(name);
        };
        /**
         * Adds or replaces a request header.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ setRequestHeader, proxy }) => {
         *      setRequestHeader('some-header', 'some-value')
         *      proxy('origin')
         *    })
         * ```
         *
         * @param name The case-insensitive name of the request header
         * @param value The value to set
         */
        this.setRequestHeader = (name, value) => {
            /* istanbul ignore else */
            if (!this.features.headers) {
                this.features.headers = {};
            }
            /* istanbul ignore else */
            if (!this.features.headers.set_request_headers) {
                this.features.headers.set_request_headers = {};
            }
            const headers = this.features.headers.set_request_headers;
            headers[name] = value;
        };
        /**
         * Alters a request header. Use this method to derive the new header value from the existing one.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ updateRequestHeader, proxy }) => {
         *      updateRequestHeader('some-header', /some-.*-part/gi, 'some-replacement')
         *      proxy('origin')
         *    })
         * ```
         *
         * @param name The case-insensitive name of the request header
         * @param match Regex to find the part that should be replaced.
         * @param replace Value that will replace the matched part.
         */
        this.updateRequestHeader = (name, match, replace) => {
            // Creates Find And Replace interpolation expression from the given regex and replacement string
            this.setRequestHeader(name, `%{http_${name}/${match.global ? '/' : ''}${(0, toEdgeRegex_1.default)(match, '', true)}/${replace}}`);
        };
        /**
         * Adds or replaces a response body. It optionally sets response code or message.
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ setResponseBody }) => {
         *      setResponseBody('<html><body>Hello World!</body></html>', 200, 'OK')
         *    })
         * ```
         *
         * @param body The response body.
         * @param code The response code.
         * @param done Indicates that this is last feature
         */
        this.setResponseBody = (body, code, done) => {
            if (!this.features.response) {
                this.features.response = {};
            }
            this.features.response.set_done = !!done;
            this.features.response.set_response_body = body;
            if (code)
                this.features.response.set_status_code = code;
        };
        /**
         * Adds or replaces a response code.
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ setResponseCode, proxy }) => {
         *      setResponseCode(200)
         *      proxy('origin')
         *    })
         * ```
         *
         * @param code The response code.
         */
        this.setResponseCode = (code) => {
            if (!this.features.response) {
                this.features.response = {};
            }
            this.features.response.set_status_code = code;
        };
        /**
         * Sends the necessary response headers to allow CORS.
         *
         * **Example**
         *
         * ```js
         *  new Router()
         *    .match('/api/:path*', ({ allowCors }) => {
         *      allowCors({
         *        origin: '*', // this is the default
         *        methods: ['get', 'post'],
         *        headers: ['x-some-header'],
         *        maxAge: 60 * 60, // one hour
         *        credentials: true
         *      })
         *    })
         * ```
         *
         * @param config
         */
        this.allowCors = (config = {}) => {
            this.setResponseHeader('Access-Control-Allow-Origin', config.origin || '*');
            if (config.methods) {
                this.setResponseHeader('Access-Control-Allow-Methods', config.methods.join(', '));
            }
            if (config.headers) {
                this.setResponseHeader('Access-Control-Allow-Headers', config.headers.join(', '));
            }
            if (config.maxAge) {
                this.setResponseHeader('Access-Control-Max-Age', config.maxAge.toString());
            }
            if (config.credentials != null) {
                this.setResponseHeader('Access-Control-Allow-Credentials', config.credentials.toString());
            }
        };
        /**
         * Adds a path_rewrite feature using path-to-regexp syntax for the source and destination
         * @param source
         * @param destination
         * @param options Additional options that allow to control the rewrite behavior
         * @private
         */
        this.rewritePath = (source, destination, options) => {
            /* istanbul ignore else */
            if (!this.features.url) {
                this.features.url = {};
            }
            /* istanbul ignore else */
            if (!this.features.url.url_rewrite) {
                this.features.url.url_rewrite = [];
            }
            // Convert ExactPath to string to
            // allow CriteriaPath to be used as source.
            if (source instanceof exact_1.ExactPath) {
                source = source.toString();
            }
            if (typeof source === 'string') {
                // When source is string, we can assume that the user wants to use the path-to-regexp syntax with support for named parameters.
                this.features.url.url_rewrite.push((0, path_1.rewritePath)(source, destination, options));
            }
            else {
                // The user will have to write substitution groups in destination by themselves when regex is used as source.
                this.features.url.url_rewrite.push({
                    syntax: 'regexp',
                    source: source ? (0, toEdgeRegex_1.default)(source) : undefined,
                    destination,
                });
            }
        };
        /**
         * Rewrites the request path.
         *
         * Example:
         *
         * ```js
         *  router.get('/products/:id', ({ updatePath }) => {
         *    updatePath('/p/:id')
         *  })
         * ```
         *
         * The substitution group params can be used in the asset path when path criteria is Regular Expression.
         * The same functionality can be achieved using the code below.
         *
         * ```js
         *  new Router()
         *    .get(/\/products\/(.+)/, ({ updatePath }) => {
         *      updatePath('/p/$1')
         *    })
         * ```
         *
         * @param destination a new route path, which can include params captured from the original path
         */
        this.updatePath = (destination) => {
            var _a;
            // params should be extracted by the latest path rule
            this.paramsExtractor.updateRouteCriteria({
                path: destination,
            });
            this.rewritePath((_a = this.routeCriteria.path) !== null && _a !== void 0 ? _a : '/:path*', destination);
        };
        /**
         * Sends string content back to client. If content is a string, the response will be sent
         * directly from the edge. If it is a function, the request will be computed in Edgio's serverless cloud.
         * StatusCode defaults to 200. On error routes we send the status code
         * as null, since we need to preserve the status code of the failed request unless it is provided.
         * @param content The content to send to the browser
         * @param statusCode The HTTP status code.
         */
        this.send = (content, statusCode) => {
            if (typeof content === 'function') {
                this.compute(async (req, res) => {
                    res.body = content();
                    res.statusCode = statusCode;
                });
                return;
            }
            this.setResponseBody(content, statusCode, true);
        };
        /**
         * Removes a request header.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', async ({ removeRequestHeader, proxy }) => {
         *      removeRequestHeader('some-header')
         *      proxy('origin')
         *    })
         * ```
         * @param name The case-insensitive name of the request header
         */
        this.removeRequestHeader = (name) => {
            // create empty object when no object exists
            this.features.headers = !this.features.headers ? {} : this.features.headers;
            this.features.headers.set_request_headers = !this.features.headers.set_request_headers
                ? {}
                : this.features.headers.set_request_headers;
            // Removing header by setting it to empty (empty headers are not added to result) because there's no
            // remove_request_header option in schema?
            const headers = this.features.headers.set_request_headers;
            headers[name] = '';
        };
        /**
         * Serves an HTML app shell from a static file with HTML content-type.
         * This method can be used to serve the initial HTML for a single page app.
         * @param indexHtmlPath The path to the app shell html file
         *
         * **Example**
         *
         * ```js
         *  new Router()
         *    .fallback(({ appShell }) => {
         *      appShell('dist/index.html')
         *    })
         * ```
         */
        this.appShell = (indexHtmlPath) => {
            this.setResponseHeader(constants_2.HTTP_HEADERS.contentType, 'text/html');
            this.serveStatic(indexHtmlPath);
        };
        /**
         * Redirects the browser to a new location.
         * Query params from the original request are added to the redirect URL.
         * Complex redirects manipulating query string are computed using Edgio Cloud Functions.
         *
         *
         * **Examples**
         *
         * ```
         *  new Router()
         *    .get('/p/:productId', ({ redirect }) => {
         *      return redirect('/products/:productId', { statusCode: 301 })
         *    })
         *.
         *  // The substitution group params can be used in the redirect location when path criteria is Regular Expression.
         *  new Router()
         *    .get(/\/p\/(.+)/, ({ redirect }) => {
         *      return redirect('/products/$1', { statusCode: 301 })
         *    })
         *
         *  // Extract id from route and apply as query string
         *  new Router()
         *    .get('/p/:productId', ({ redirect }) => {
         *      return redirect('/product', { query: { id: ':productId' }})
         *    })
         *
         *  new Router()
         *  .get(/\/p\/(\d+)\/?/, ({ redirect }) => {
         *      return redirect('/product', { query: { id: '$1' }})
         *    })
         *
         *  // Extract id from query string and apply to route
         *  new Router()
         *    .get({ path: '/p', query: { id: ':id' } }, ({ redirect }) => {
         *      return redirect('/product/:id')
         *    })
         * ```
         *
         * @param to The URL to which the browser will be redirected.
         * @param options
         * @param options.statusCode The HTTP status to return. Defaults to 302
         * @param options.query Key-value object of query strings to be added to the redirect url
         */
        this.redirect = (to, options = {}) => {
            var _a, _b, _c, _d, _e, _f;
            // query object contains query extracted from toPath and additional queries provided in options
            const { to: toPath, statusCode, query: query } = (0, RedirectOptions_1.normalizeRedirectOptions)(to, options);
            // we can use simple rewrite if query is used for matching only
            const isMatchOnlyQuery = () => {
                var _a;
                return !Object.values((_a = this.routeCriteria.query) !== null && _a !== void 0 ? _a : {}).find(value => typeof value === 'string' && value.startsWith(':'));
            };
            // Sailfish is matching url_redirect.source against the current request URL,
            // and not incoming URL. If there's any rewrite rule together with redirect (such as the one in serveStatic method),
            // the redirect is not matched. This is not how the old redirect method worked. The redirect("/dest/:path") would not work.
            // That's why we need to add this rewrite rule to the same URL.
            this.rewritePath('/:path*', '/:path*');
            // When there's no manipulation with request or response query,
            // we can bind params via regex on the Edge.
            // Otherwise, there's no way to backreference query matches during replace,
            // as they can be in any order, and the replace follows match order.
            if ((0, isEmpty_1.default)(query) && isMatchOnlyQuery()) {
                this.features.url = (_a = this.features.url) !== null && _a !== void 0 ? _a : {};
                this.features.url.url_redirect = (_b = this.features.url.url_redirect) !== null && _b !== void 0 ? _b : {};
                this.features.url.url_redirect.code = statusCode;
                // When path is provided as Regex there are no params in path to be extracted.
                // The user can use groups captured params in destination path.
                if (((_c = this.routeCriteria) === null || _c === void 0 ? void 0 : _c.path) instanceof RegExp) {
                    this.features.url.url_redirect.source = (0, toEdgeRegex_1.default)((_d = this.routeCriteria) === null || _d === void 0 ? void 0 : _d.path);
                    this.features.url.url_redirect.destination = toPath;
                    this.features.url.url_redirect.syntax = 'regexp';
                    return;
                }
                this.features.url.url_redirect = {
                    ...this.features.url.url_redirect,
                    ...(0, path_1.rewritePath)((_f = (_e = this.routeCriteria) === null || _e === void 0 ? void 0 : _e.path) === null || _f === void 0 ? void 0 : _f.toString(), toPath, {
                        skipQuery: true,
                    }),
                };
                return;
            }
            // Complex redirects manipulating query string are delegated to compute and cached "for ever".
            // Cache key includes query string by default so every path / query string
            // combination is cached independently, which is what we want as redirects
            // location header includes original request's query string.
            this.sendToServerless(constants_1.EDGIO_CLOUD_FUNCTIONS_HINTS.redirect, async (req, res) => {
                let queryWithReplacedParams = {};
                // Bind params to query key and values extracted from
                // redirect path and options
                for (const queryKey in query) {
                    queryWithReplacedParams = {
                        ...queryWithReplacedParams,
                        [(0, bindParams_1.default)(queryKey, req.params)]: (0, bindParams_1.default)(query[queryKey], req.params),
                    };
                }
                // Generate the final location by binding params to redirect path and
                // concatenating the original request query together with extracted query from
                // redirect path and options
                res.setHeader(constants_2.HTTP_HEADERS.location, `${(0, bindParams_1.default)(toPath, req.params)}${Object.keys(queryWithReplacedParams).length > 0
                    ? '?' + qs_1.default.stringify(queryWithReplacedParams)
                    : ''}`);
                res.statusCode = statusCode;
                res.body = '';
            });
            this.cache({
                cacheableStatusCodes: [301, 302, 305, 307, 308],
                edge: {
                    maxAgeSeconds: constants_1.FAR_FUTURE_TTL,
                },
            });
        };
        /**
         * Adds a `set-cookie` header to the response.
         * This does not replace any cookies with the same name - for that you should use `updateResponseCookie`.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ addResponseCookie, proxy }) => {
         *      proxy('origin')
         *      addResponseCookie('my-cookie', 'my-cookie-value', { domain: 'test.com' })
         *    })
         * ```
         *
         * @param name Name of the cookie to add.
         * @param value Value to set
         * @param options Optional options to add to cookie
         */
        this.addResponseCookie = (name, value, options) => {
            this.addResponseHeader(constants_2.HTTP_HEADERS.setCookie, (0, cookieUtils_1.serializeCookie)(name, value, options));
        };
        /**
         * Allows to change the origin that the request is proxied to.
         * This is useful when you want to proxy to a different origin based on the matched rule.
         * The origin set by the latest matched rule will be used.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/:path*', ({ setOrigin }) => {
         *      setOrigin('fallback_origin')
         *    })
         *    .get('/products/1', ({ setOrigin }) => {
         *      setOrigin('web_origin')
         *    })
         * ```
         *
         * @param name The origin name
         */
        this.setOrigin = (name) => {
            if (!this.features.origin)
                this.features.origin = {};
            this.features.origin.set_origin = name;
        };
        /**
         * Allows to set a comment feature on the rule, which will be displayed in the dashboard.
         * The comment message supports markdown.
         * @param message The comment message.
         * @param append If true, the comment will be appended to the existing comment.
         */
        this.setComment = (message, append = false) => {
            if (!append)
                this.features.comment = '';
            this.features.comment += message;
        };
        this.routeCriteria = criteria;
        this.paramsExtractor = new ParamsExtractor_1.default(criteria);
        this.router = router;
    }
    /**
     * Creates a Features instance by running the provided callback.
     * @private
     * @param creator
     * @returns
     */
    evaluate(creator) {
        creator(this);
        return this.features;
    }
    /**
     * Forwards the request to the serverless origin
     * @param hint
     * @param fn
     */
    sendToServerless(hint, fn) {
        const hintIndex = fn
            ? this.router.addFunction(async (req, res, propertyContext) => {
                // extract params matched by routeCriteria path, query matched by routeCriteria query
                // and add them to request for backward compatibility
                req.params = this.paramsExtractor.extract(req);
                // execute original compute function
                await fn(req, res, propertyContext);
                // set default content type if none was set
                if (!res.getHeader(constants_2.HTTP_HEADERS.contentType)) {
                    res.setHeader(constants_2.HTTP_HEADERS.contentType, 'text/plain');
                }
            })
            : null;
        this.setRequestHeader(`+${constants_1.EDGIO_CLOUD_FUNCTIONS_HINT_HEADER}`, hintIndex !== null ? `${hint}:${hintIndex}` : hint);
        // Remove the default origin and team prefix
        // RequestContext.executeApp will append the origin and team
        this.setOrigin(origins_1.SERVERLESS_ORIGIN_NAME);
    }
}
exports.default = RouteHelper;
