"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toSeconds = void 0;
/**
 * Converts time interval type to total number of seconds.
 * @param timeInterval Regex string defined by Sailfish specification
 */
const convertSailfishTimeIntervalToSeconds = (timeInterval) => {
    const regex = /^([0-9]+)(s|m|h|d|w|y)$/g;
    const res = regex.exec(timeInterval);
    if (res == null)
        throw new Error(`Unsupported time interval "${timeInterval}".`);
    const value = parseInt(res[1]);
    const timeUnit = res[2];
    switch (timeUnit) {
        case 's':
            return value;
        case 'm':
            return value * 60;
        case 'h':
            return value * 60 * 60;
        case 'd':
            return value * 60 * 60 * 24;
        case 'w':
            return value * 60 * 60 * 24 * 7;
        case 'y':
            return value * 60 * 60 * 24 * 365;
        default:
            throw new Error(`Unsupported time unit "${timeUnit}".`);
    }
};
/**
 * Converts Sailfish max age type to seconds
 */
const toSeconds = (maxAge, code) => {
    if (typeof maxAge === 'string') {
        return convertSailfishTimeIntervalToSeconds(maxAge);
    }
    else {
        return convertSailfishTimeIntervalToSeconds(maxAge[code]);
    }
};
exports.toSeconds = toSeconds;
