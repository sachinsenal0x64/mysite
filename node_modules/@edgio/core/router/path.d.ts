/**
 * Converts an express-style path pattern like /products/:id to a regular expression source string
 * suitable for assignment to Router features.
 * @param path
 * @returns
 */
export declare function pathToRegex(path: string): string;
/**
 * Creates a regex rewrite object based on the specified sourcePath and destPath, both
 * of which accept express-style path strings.
 * @param sourcePath
 * @param destPath
 * @param options Additional options that allow to control the rewrite behavior
 * @returns
 */
export declare function rewritePath(sourcePath: string | undefined, destPath: string, options?: {
    /**
     * Set to true to not include optional trailing slash in rewrite destination
     */
    skipSlash?: boolean;
    /**
     * Set to true to not include optional query in rewrite destination
     */
    skipQuery?: boolean;
}): {
    source?: string;
    destination: string;
    syntax?: 'path-to-regexp' | 'regexp';
};
/**
 * Returns rewritten url based on the specified sourcePath and destPath.
 * The unchanged destination is returned when no sourcePath is provided.
 * The null is returned when url does not match sourcePath.
 * @param url
 * @param source
 * @param destination
 * @param syntax
 * @returns
 */
export declare function mapURL(url: string, source: string | undefined, destination: string, syntax?: 'path-to-regexp' | 'regexp'): string | null;
export declare function getBackReferences(path: string): {
    [key: string]: string;
};
/**
 * Converts named parameters from regex-to-path format to regex substitution format
 * with indexes.
 * @param source
 * @param destination
 * @returns
 */
export declare function nameParamsToIndex(source: string, destination: string): string;
