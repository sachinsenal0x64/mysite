"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServiceWorkerMaxAgeFromParam = exports.getServiceWorkerMaxAgeFromHeader = void 0;
const constants_1 = require("@edgio/core/constants");
/**
 * Returns the max age in seconds specified in the x-sw-cache-control response header.
 * If no header or max-age value is present, returns null
 * @param response
 * @returns
 */
function getServiceWorkerMaxAgeFromHeader(response) {
    const header = response.headers.get(constants_1.HTTP_HEADERS.xSwCacheControl);
    if (header) {
        for (let pair of header.split(',')) {
            const [key, value] = pair.split('=');
            if (key === 'max-age') {
                return parseInt(value);
            }
        }
    }
    return null;
}
exports.getServiceWorkerMaxAgeFromHeader = getServiceWorkerMaxAgeFromHeader;
/**
 * Returns the max age in seconds specified in custom query param.
 * If no custom param is present, returns null
 * @param response
 * @returns
 */
function getServiceWorkerMaxAgeFromParam(response) {
    var _a;
    if (((_a = response === null || response === void 0 ? void 0 : response.url) === null || _a === void 0 ? void 0 : _a.length) > 0) {
        const customMaxAgeSeconds = new URL(response.url).searchParams.get(constants_1.PREFETCH_TTL_PARAM);
        if (customMaxAgeSeconds) {
            return parseInt(customMaxAgeSeconds);
        }
    }
    return null;
}
exports.getServiceWorkerMaxAgeFromParam = getServiceWorkerMaxAgeFromParam;
/**
 * Returns the max age in seconds specified in custom query param.
 * If no custom param is present, returns the max age in seconds specified in the x-sw-cache-control response header.
 * If no header or max-age value is present, this function returns 0.
 * @param response
 * @returns
 */
function getServiceWorkerMaxAge(response) {
    return (getServiceWorkerMaxAgeFromParam(response) || getServiceWorkerMaxAgeFromHeader(response) || 0);
}
exports.default = getServiceWorkerMaxAge;
