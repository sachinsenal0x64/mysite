"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prefetch_1 = require("./prefetch");
const registerServiceWorker_1 = require("./registerServiceWorker");
const watchElements_1 = __importDefault(require("./watchElements"));
const listenForSwMessages_1 = __importDefault(require("./listenForSwMessages"));
const loadManifest_1 = __importDefault(require("./loadManifest"));
const CacheManifest_1 = require("@edgio/core/router/CacheManifest");
const watchLinks_1 = __importDefault(require("./watchLinks"));
const defaults = {
    includeCacheMisses: false,
    cacheHost: undefined,
    forcePrefetchRatio: 0,
};
/**
 * Installs the service worker and automatically prefetches all links on the page
 * that match the rules with the 'max_age' and 'service_worker_max_age' features.
 *
 * It also immediately prefetches all URLs specified in `prefetchURLs`.
 * All links whose `href` attribute matches one of the specified `prefetchPatterns` will be watched and when
 * a matching link is visible in the viewport, the destination URL will be prefetched and added to the cache.
 * See InstallOptions for more details.
 *
 * **Example of simple installation**
 *
 * ```js
 *  import { install } from '@edgio/prefetch/window';
 *
 * // Install the service worker
 * document.addEventListener('DOMContentLoaded', () => {
 *   install();
 * });
 * ```
 *
 * **Example of installation with advanced config**
 *
 * ```js
 *  import { install } from '@edgio/prefetch/window';
 *
 * // Install the service worker
 * document.addEventListener('DOMContentLoaded', () => {
 *   install({
 *      // Prefetches the specified URLs immediately after installation
 *      prefetchURLs: [
 *        '/some/url'
 *      ],
 *      // Watches all links on the page that match specified regex patterns and prefetches their destination URL
 *      // when the link becomes visible in the viewport
 *      prefetchPatterns: [
 *        /\/products\/(.+)/
 *      ]
 *   });
 * });
 * ```
 * @param options
 */
async function install(options) {
    options = { ...defaults, ...options };
    const { serviceWorker } = navigator;
    if (typeof serviceWorker === 'undefined') {
        return;
    }
    const { prefetchURLs, watch, serviceWorkerPath = '/service-worker.js', observe, prefetchPatterns = [], } = options;
    await (0, loadManifest_1.default)({ cacheHost: options.cacheHost });
    // @ts-ignore
    const cacheManifest = CacheManifest_1.CacheManifest.from(window.__EDGIO_CACHE_MANIFEST__ || {});
    (0, prefetch_1.configure)({ ...options });
    // Install the service worker
    (0, registerServiceWorker_1.registerServiceWorker)(serviceWorkerPath);
    // Prefetch requested URLs immediately
    prefetchURLs === null || prefetchURLs === void 0 ? void 0 : prefetchURLs.forEach(url => (0, prefetch_1.prefetch)(url));
    // We watch links currently in the DOM as well as any links that are added in the future.
    // Observer options are only needed for the first call since this creates the MutationObserver.
    (0, watchLinks_1.default)(cacheManifest, prefetchPatterns, observe);
    // Watch specified elements and call callback when they become visible
    (0, watchElements_1.default)(watch);
    (0, listenForSwMessages_1.default)();
}
exports.default = install;
