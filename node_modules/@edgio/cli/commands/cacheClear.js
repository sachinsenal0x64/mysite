"use strict";

const _excluded = ["context"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
const authenticate = require('../prompts/authenticate');
const EdgioPackageJson = require('../utils/EdgioPackageJson');
const Validator = require('../utils/validator');
const deprecatedCommandWarning = require('../prompts/deprecatedCommandWarning');
const getEdgioConfig = require('../utils/getEdgioConfig');
exports.command = 'cache-clear [options]';
exports.describe = 'Purges responses from the edge cache for a specific environment';
exports.builder = yargs => {
  yargs.usage('$0 cache-clear [options]').example('$0 cache-clear --organization=organization-name --property=property-name --environment=environment-name --path=/products/1', 'Clear "/products/1" for "property-name" project under user\'s personal organization').example('$0 cache-clear --organization=organization-name --property=property-name --environment=environment-name --path=/products/*', 'Clear all urls on the domains in this project under "organization-name" organization that match the prefix "/products"').example('$0 cache-clear --organization=organization-name --property=property-name --environment=environment-name --surrogate-key=key', 'Clear all domains in this project under user\'s personal organization that have the surrogate key "key"').describe('organization', 'Slug of the organization where the property belongs. Using your personal organization by default').describe('property', 'Slug of the property whose cache should be cleared. If omitted, the property name will automatically be derived from the name field in package.json.').describe('path', 'A path to clear. Use "*" as a wildcard.').describe('surrogate-key', 'Clears all responses assigned to the specified surrogate key.').describe('environment', 'The name of the environment whose cache should be cleared.')
  // @deprecated legacy params
  .describe('team', "Use '--organization' instead. Will be deprecated in next major version.").describe('site', "Use '--property' instead. Will be deprecated in next major version.")
  // @deprecated end
  .nargs('surrogate-key', 1).string('surrogate-key').alias('s', 'surrogate-key').nargs('path', 1).string('path').alias('p', 'path').alias('e', 'environment')
  // Arguments pattern and surrogate-key are mutually exclusive
  .conflicts('path', 'surrogate-key');
};
exports.handler = async _ref => {
  let {
      context
    } = _ref,
    yargs = _objectWithoutProperties(_ref, _excluded);
  context.setLoginAction('cacheClear');
  await authenticate(context);
  const {
    logger,
    analytics
  } = context;
  const {
    organization: organizationSlugParam,
    property: propertySlugParam,
    path,
    surrogateKey,
    environment: environmentName,
    // @deprecated legacy params
    team: teamSlugParam,
    site: siteSlugParam
  } = yargs;
  if (siteSlugParam) {
    deprecatedCommandWarning(context, 'site', 'property');
  }
  if (teamSlugParam) {
    deprecatedCommandWarning(context, 'team', 'organization');
  }
  const localPropertyParam = propertySlugParam || siteSlugParam;
  const localOrganizationParam = organizationSlugParam || teamSlugParam;
  const packageJson = EdgioPackageJson.loadPackageJson(path);
  const config = getEdgioConfig();

  // We don't track any other values as those are personal
  const promiseTracked = analytics.trackEvent('cache-clear');
  const validator = new Validator(logger, {
    exitOnError: true
  });

  // Try to get the property name from the provided param, edgio.config.js and the package.json in that order.
  const propertySlug = validator.validatePropertyName(localPropertyParam || (config === null || config === void 0 ? void 0 : config.name) || (packageJson === null || packageJson === void 0 ? void 0 : packageJson.name));
  const organizationSlug = localOrganizationParam || (config === null || config === void 0 ? void 0 : config.organization) || (config === null || config === void 0 ? void 0 : config.team);
  await logger.step('📡️ Purging the cache...', async () => {
    return await context.api.purgeCache({
      organizationSlug,
      propertySlug,
      path,
      surrogateKey,
      environmentName
    });
  });
  logger.success('🚀 Cache has been successfully purged.');
  await promiseTracked;
};