"use strict";

const EdgioPackageJson = require('../../utils/EdgioPackageJson');
const authenticate = require('../../prompts/authenticate');
const getEdgioConfig = require('../../utils/getEdgioConfig');
const getProperty = require('../../utils/getProperty');
const {
  EOL
} = require('os');
const {
  green
} = require('chalk');
const Validator = require('../../utils/validator');
const deprecatedCommandWarning = require('../../prompts/deprecatedCommandWarning');
exports.command = 'set-production';
// This command is hidden until console team will be ready to support it
// exports.describe = 'Changes the production environment'
exports.builder = {
  environment: {
    type: 'string',
    alias: 'e',
    describe: 'The name of the environment.',
    demandOption: true
  },
  organization: {
    type: 'string',
    alias: 'o',
    describe: 'The environment of the organization under which the property belongs. Using private space if omitted.'
  },
  property: {
    alias: 'p',
    type: 'string',
    describe: 'Slug of the property. Using package.json environment property if omitted.'
  },
  path: {
    type: 'string',
    describe: "Path to your property's root directory. Uses current directory by default.",
    default: '.'
  },
  // @deprecated legacy params
  team: {
    type: 'string',
    alias: 't',
    describe: 'The environment of the team under which the property belongs. Using private space if omitted.'
  },
  site: {
    type: 'string',
    alias: 's'
  }
};
exports.handler = async yargs => {
  var _setResult$setProduct;
  const {
    context,
    environment: environmentParam,
    site: siteSlugParam,
    team: teamSlugParam,
    organization: organizationSlugParam,
    property: propertySlugParam,
    path: pathParam
  } = yargs;
  await authenticate(context);
  if (siteSlugParam) {
    deprecatedCommandWarning(context, 'site', 'property');
  }
  if (teamSlugParam) {
    deprecatedCommandWarning(context, 'team', 'organization');
  }
  const config = getEdgioConfig();
  if (!config) {
    context.logger.error(`Error: edgio.config.js not found. Please run "0 init" to initialize your Edgio project.\n`);
    process.exit(1);
  }
  const validator = new Validator(context.logger, {
    exitOnError: true
  });
  const packageJson = EdgioPackageJson.loadPackageJson(pathParam);
  const propertySlug = validator.validatePropertyName(propertySlugParam || siteSlugParam || config.name || packageJson.name);
  const organizationSlug = organizationSlugParam || teamSlugParam || config.organization || config.team;
  context.logger.warn('WARNING: Experimental feature - compatibility and support is not guaranteed (APPOPS-15456).');
  await context.logger.title('âŒ› Changing production environment...');
  const environmentDetails = [`> organization=${organizationSlug || 'Private space'}`, `> property=${propertySlug}`, `> environment=${environmentParam}`].filter(Boolean); // Removes falsy values
  context.logger.info(environmentDetails.join(EOL));
  let property = await getProperty(context, propertySlug, organizationSlug);
  let environments = property.environments.nodes;
  const environmentToChange = environments.find(environment => environment.name === environmentParam);
  if (!environmentToChange) {
    context.logger.error(`Error: Environment "${environmentParam}" was not found.`);
    process.exit(1);
  }
  if (environmentToChange.production) {
    context.logger.error(`Error: Nothing to change. The environment "${environmentParam}" is production environment.`);
    process.exit(1);
  }
  const setResult = await context.api.setProductionEnvironment(environmentToChange.id);
  const errors = (_setResult$setProduct = setResult.setProductionEnvironment) === null || _setResult$setProduct === void 0 ? void 0 : _setResult$setProduct.userErrors;
  if (errors && errors.length === 0) {
    context.logger.info(green(`Production environment was successfully changed to "${environmentParam}"`));
    process.exit(0);
  }
  if (errors && errors.length > 0) {
    errors.forEach(error => {
      context.logger.error(`Error: ${error.message}.`);
    });
    process.exit(1);
  }
  context.logger.error(`Error: Unknown error. Couldn't change production environment to "${environmentParam}".`);
  process.exit(1);
};