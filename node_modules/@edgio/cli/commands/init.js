"use strict";

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const init = require('../utils/init');
const useDeployOptions = require('../utils/useDeployOptions');
exports.command = 'init';
exports.describe = 'Adds all required Edgio dependencies and files to your app.';
exports.builder = _objectSpread({
  edgioVersion: {
    type: 'string',
    describe: 'The Edgio version to install.',
    default: 'latest'
  },
  skipEdgioDeps: {
    type: 'boolean',
    describe: 'If true, Edgio packages will not be installed.'
  },
  connector: {
    type: 'string',
    describe: 'The name of a connector package to install and use to prepare your app for deployment on Edgio.'
  },
  name: {
    type: 'string',
    describe: 'The name to give to the property in the Edgio Developer Console.'
  },
  organization: {
    type: 'string',
    describe: 'The name of the organization to which the property should be deployed.'
  },
  origin: {
    type: 'string',
    describe: 'The domain name or IP address of the origin site.'
  },
  deploy: {
    type: 'boolean',
    describe: 'Include this flag to automatically deploy your property after creation.'
  },
  // @deprecated legacy params
  team: {
    type: 'string',
    deprecated: "Use '--organization' instead. Will be deprecated in next major version."
  },
  purgeCacheOnDeploy: {
    type: 'boolean',
    describe: 'Clear cache after site deploy.'
  }
}, useDeployOptions());

// Analytics of init are handled inside the init function
exports.handler = async yargs => {
  const {
    context
  } = yargs;
  let analyticsParams = {};
  for (const key in exports.builder) {
    analyticsParams[key] = yargs[key];
  }

  // Remove personal information from analytics
  delete analyticsParams.origin;
  // These are from deploy options
  delete analyticsParams['commit-url'];
  const promiseTracked = context.analytics.trackEvent('init', analyticsParams);
  await init(yargs);
  await promiseTracked;
};