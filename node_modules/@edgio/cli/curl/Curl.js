"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EXCLUDED_CURL_ARGS = exports.CURL_FORMAT = void 0;
var _execa = _interopRequireDefault(require("execa"));
var _TmpFile = _interopRequireDefault(require("../utils/TmpFile"));
var _errors = require("./errors");
var _CurlResponse = _interopRequireDefault(require("./CurlResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// Ref: https://everything.curl.dev/usingcurl/verbose/writeout#available-write-out-variables
const CURL_FORMAT = JSON.stringify({
  remoteIp: '%{remote_ip}',
  remotePort: '%{remote_port}',
  localIp: '%{local_ip}',
  localPort: '%{local_port}',
  responseCode: '%{response_code}',
  scheme: '%{scheme}',
  urlEffective: '%{url_effective}',
  time: {
    timeNameLookup: '%{time_namelookup}',
    timeConnect: '%{time_connect}',
    timeAppconnect: '%{time_appconnect}',
    timePretransfer: '%{time_pretransfer}',
    timeRedirect: '%{time_redirect}',
    timeStarttransfer: '%{time_starttransfer}',
    timeTotal: '%{time_total}'
  },
  speed: {
    speedDownload: '%{speed_download}',
    speedUpload: '%{speed_upload}'
  },
  size: {
    sizeRequest: '%{size_request}',
    sizeDownload: '%{size_download}',
    sizeHeader: '%{size_header}',
    sizeUpload: '%{size_upload}'
  }
});

// Following options are not supported since those are required for Edgio curl to run.
// So we issue an error when user provided any of the reserved options to 0 curl.
exports.CURL_FORMAT = CURL_FORMAT;
const EXCLUDED_CURL_ARGS = ['-w', '--write-out', '-D', '--dump-header', '-o', '--output', '-s', '--silent'];
exports.EXCLUDED_CURL_ARGS = EXCLUDED_CURL_ARGS;
class Curl {
  constructor(args, opts = {}) {
    this._validateUserArgs(args);
    this._userArgs = args;
    this._curlBinPath = opts.curlBinPath;
    this._responseParserOptions = {
      returnBody: opts.showBody,
      maxBodyLength: opts.maxBodyLength
    };
  }

  /**
   * Execute curl
   *
   * Returns object (CurlResponse result)
   */
  async exec() {
    const bodyFile = await _TmpFile.default.create();
    const headerFile = await _TmpFile.default.create();
    const {
      stdout,
      stderr,
      command
    } = await (0, _execa.default)(this._curlBinPath, this.getCurlArguments(headerFile.path(), bodyFile.path()), {
      env: _objectSpread({}, process.env)
    }).catch(err => {
      bodyFile.cleanup();
      headerFile.cleanup();
      throw new _errors.CurlCommandError(err);
    });
    const rawHeaders = await headerFile.read();
    const rawBody = await bodyFile.read();
    bodyFile.cleanup();
    headerFile.cleanup();
    return new _CurlResponse.default(rawBody, rawHeaders, stdout, stderr, command, this._responseParserOptions);
  }

  /**
   * Returns curl arguments.
   *
   * Note: Order is important. User arguments must be after internal ones.
   *.           Otherwise unfinished (args with no values) will fail with inaccurate error message.
   */
  getCurlArguments(headerFilePath, bodyFilePath) {
    return ['-w', CURL_FORMAT, '-H', 'x-ec-debug: x-ec-cache,x-ec-cache-remote,x-ec-check-cacheable,x-ec-cache-key,x-ec-cache-state', '-H', 'x-ec-pragma: cache-verbose,log-all,trace,track', '-D', headerFilePath, '-o', bodyFilePath, '-s', '-S', ...this._userArgs];
  }

  /**
   * Validated excluded arguments
   */
  _validateUserArgs(args) {
    args.forEach(arg => {
      if (EXCLUDED_CURL_ARGS.includes(arg)) {
        throw new _errors.CurlUnsupportedArgumentError(arg);
      }
    });
  }

  /**
   * Execute curl with arguments
   */
  static run(userArgs, options) {
    return new Curl(userArgs, options).exec();
  }
}
exports.default = Curl;