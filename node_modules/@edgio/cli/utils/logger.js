"use strict";

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const chalk = require('chalk');
const {
  mapValues
} = require('lodash');
const {
  formatDuration
} = require('./time');
const logWithChalk = color => (...messages) => {
  console.log(highlightWithChalk(color)(...messages));
};
const highlightWithChalk = color => (...messages) => {
  let chalkLogger = chalk;
  if (color) {
    chalkLogger = chalkLogger[color];
  }
  return chalkLogger(...messages);
};
class Logger {
  constructor(context) {
    this.context = context;
  }
  async step(title, options, stepFn) {
    if (!stepFn) {
      stepFn = options;
      options = {};
    }
    const {
      doneTitle = 'done'
    } = options;
    const hrStart = process.hrtime();
    console.log(); // new line
    this.title(title);
    const result = await stepFn();
    const hrEnd = process.hrtime(hrStart);
    const ms = Math.round(hrEnd[0] * 1000 + hrEnd[1] / 1000000);
    this.title(`${doneTitle} ${chalk.grey(formatDuration(ms))}`);
    return result;
  }
  title(msg) {
    console.log(chalk.bold(msg));
  }
  debug(...args) {
    if (this.context.verbose) {
      logWithChalk('grey')(...args);
    }
  }
  info(...args) {
    logWithChalk()(...args);
  }
  success(...args) {
    logWithChalk('green')(...args);
  }
  error(...args) {
    logWithChalk('red')(...args);
  }
  warn(...args) {
    logWithChalk('yellow')(...args);
  }
  verbose(msg) {
    if (this.context.verbose) {
      logWithChalk('grey')(msg);
    }
  }
  graphqlQuery(query, variables = {}, files = {}) {
    this.verbose(`GraphQL query: ${query.split('\n').map(s => s.trim()).join(' ')} with variables: ${JSON.stringify(_objectSpread(_objectSpread({}, variables), mapValues(files, () => '<FILE>')))}`);
  }
  graphqlResponse(data) {
    this.verbose(`GraphQL response: ${JSON.stringify(data)}`);
  }

  /**
   * Returns just the highlighted message without logging
   * @returns {String}
   */
  highlight(color, ...args) {
    return highlightWithChalk(color)(...args);
  }
}
module.exports = Logger;