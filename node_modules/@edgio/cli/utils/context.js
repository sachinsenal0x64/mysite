"use strict";

const {
  AuthenticationError
} = require('./errors');
const {
  getApiKey,
  saveApiKey
} = require('./config');
const Api = require('./api');
const Logger = require('./logger');
const {
  Analytics,
  removeAnalyticsID
} = require('./analytics');
const {
  MIXPANEL_TOKEN,
  API_URL,
  API_STG_URL
} = require('../constants');
class Context {
  constructor(argv) {
    let {
      apiUrl,
      token,
      local,
      dev,
      stage,
      verbose,
      nonInteractive,
      ignoreError,
      proxyUrl
    } = argv;
    token = token || process.env.EDGIO_DEPLOY_TOKEN;
    if (local) this.apiUrl = 'http://localhost:3000';else if (dev) this.apiUrl = API_URL;else if (stage) this.apiUrl = API_STG_URL;else this.apiUrl = apiUrl; // apiUrl argv has default value of production url, so it can be used as fallback

    this.verbose = verbose;
    this.nonInteractive = nonInteractive || !!token;
    this.apiKey = token || getApiKey(this.apiUrl);
    this.apiKeyOverride = !!token;
    this.proxyUrl = proxyUrl || process.env.CLI_PROXY_URL;

    // Will contain the name of authenticated user
    this.currentActor = null;
    this.api = new Api(this);
    this.logger = new Logger(this);
    this.analytics = new Analytics(MIXPANEL_TOKEN);
    // right at the beginging set the clientID, because we want to track
    // events as soon as possible, if user was once logged in, then we
    // know that client id is set and alias is created
    this.analytics.setClientId(getApiKey(this.apiUrl));
    this.ignoreErrors = [];
    if (ignoreError) {
      // Normalizing into an Array
      this.ignoreErrors = typeof ignoreError === 'string' ? [ignoreError] : ignoreError;
    }
  }
  onLogin(name, apiKey) {
    this.currentActor = {
      name,
      deployToken: null
    };
    this.apiKey = apiKey;
    this.loginAction = null;
    saveApiKey(this.apiUrl, apiKey);
    this.analytics.setClientId(getApiKey(this.apiUrl));
    this.analytics.setEmail(name);
  }
  setLoginAction(action) {
    this.loginAction = action;
  }
  async checkAuthentication() {
    if (!this.apiKey) {
      return;
    }
    try {
      this.currentActor = await this.api.currentActor();
    } catch (e) {
      if (e instanceof AuthenticationError) {
        return;
      }
      throw e;
    }
  }
  logout() {
    this.currentActor = null;
    saveApiKey(this.apiUrl, null);
    // Remove local analyticsID so we can create a new one on another login
    removeAnalyticsID();
  }
}
module.exports = Context;