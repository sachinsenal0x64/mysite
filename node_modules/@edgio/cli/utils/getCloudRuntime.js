"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCloudRuntime = exports.DEFAULT_CLOUD_RUNTIME = void 0;
const chalk = require('chalk');

/**
 * We allow only following versions per edgio packages.
 * This way, we can be sure that if we develop on older version, and dont have any deprecation warnings,
 * the api will not be changes in next major version - same cant be said for further version.
 * We can keep older versions here, but warn users that they are not officially supported.
 */
const validRuntimesSet = new Set(['nodejs18.x', 'nodejs20.x']);
// Default cloud runtime in case when invalid one is detected locally / set through cloudRuntime property.
const DEFAULT_CLOUD_RUNTIME = 'nodejs18.x';
exports.DEFAULT_CLOUD_RUNTIME = DEFAULT_CLOUD_RUNTIME;
const getCloudRuntime = (config, logger, validRuntimes = validRuntimesSet) => {
  // AWS format - we use it for warning messages to point users to values they can put into cloudRuntime property..
  const localVersion = `nodejs${process.version.substring(1).split('.')[0]}.x`;
  if (!config.cloudRuntime) {
    // We try to match cloud runtime to local one
    config.cloudRuntime = localVersion;
    if (!validRuntimes.has(config.cloudRuntime)) {
      logger.warn('⚠️ WARNING!', `\nLocal NodeJS runtime ${chalk.green(config.cloudRuntime)} is not supported in cloud. Defaulting to ${chalk.green(DEFAULT_CLOUD_RUNTIME)}.`, 'Please set cloudRuntime property inside of edgio.config.js in order to change it.\n');
      config.cloudRuntime = DEFAULT_CLOUD_RUNTIME;
    }
  } else {
    const deprecation = validRuntimes.has(config.cloudRuntime);
    if (!deprecation) {
      // If deprecation info doesnt exist, we print a warning about supported functions.
      logger.warn('\n⚠️ WARNING!', '\nInvalid cloudRuntime value detected in edgio.config.js.', '\nPlease use one of following:', chalk.green(Array.from(validRuntimes).reduce((prevValue, value) => prevValue + ',' + value, '').split(',').slice(1).join(' or ')) + '.', 'Defaulting to', chalk.green(DEFAULT_CLOUD_RUNTIME) + '.\n');
      config.cloudRuntime = DEFAULT_CLOUD_RUNTIME;
    }

    // We check whether-or-not the cloudRuntime matches the local node runtime.
    if (localVersion !== config.cloudRuntime) {
      logger.warn('\n⚠️ WARNING!', `\nThere is a version mismatch between the major version of Node.js install locally and the`, `\nselected cloudRuntime in edgio.config.js that will be used while running in Edgio platform.`, `\nPlease be aware that this might lead to unexpected behaviour in some cases.`, `\n`, `\nLocal version: ${chalk.green(localVersion)}`, `\nCloud Runtime version: ${chalk.green(config.cloudRuntime)}`);
    }
  }
  return config.cloudRuntime;
};
exports.getCloudRuntime = getCloudRuntime;